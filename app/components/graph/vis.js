/* eslint-disable no-underscore-dangle */
/* eslint-disable no-console */
/* eslint-disable linebreak-style */
/* eslint-disable react/prop-types */
/* eslint-disable no-unused-vars */
/* eslint-disable no-use-before-define */
/* eslint-disable camelcase */
/* eslint-disable no-param-reassign */
import React, { Component, PureComponent } from 'react';
// import PropTypes from 'prop-types';
// import { connect } from 'react-redux';
// import { push } from 'react-router-redux';
import * as d3 from 'd3';
// import * as sententree from 'sententree';
// import { max } from 'moment';
// import { Row, Form } from 'antd';
import Chart from 'react-google-charts';
import netClustering from 'netclustering';
import sentiment from 'multilang-sentiment';
import { string } from 'prop-types';
import * as jsnx from 'jsnetworkx';
import * as science from 'science';
import * as Queue from 'tiny-queue';
import * as reorder from 'reorder.js/index';
import Louvain from './jLouvain';
import { OpinionLeader } from './OpinionLeader';
import { AuthorTable } from './authorTable';
import WordTree from './wordTree';
import OpinionLeaderView from './OpinionLeaderView';
// import request from 'request';

const SetNumOfNodes = 200;
class Graph extends Component {
  constructor(props) {
    super(props);
    this.myRef = React.createRef();
    this.state = {
      ...props,
      draw: 1,
      cellData: {},
      beforeThisDate: '',
      cellForceSimulation: '',
      totalAuthorInfluence: '',
      user: [],
      hover: 0,
    };
    this.drawWordTree = this.drawWordTree.bind(this);
  }

  componentDidMount() {
    // console.log(this.props.name);
    // console.log('vis_DidMount');
  }

  shouldComponentUpdate(nextProps, nextState) {
    // console.log(this.state, nextState);
    const { opState: thisOpState, ...thisWithoutOpState } = this.props;
    const { opState: nextOpstate, ...nextWithoutOpState } = nextProps;
    // console.log(this.props, nextProps);
    // console.log(thisWithoutOpState, nextWithoutOpState);
    if (!this.state.hover) {
      if (JSON.stringify(thisWithoutOpState) === JSON.stringify(nextWithoutOpState)) {
        if (JSON.stringify(this.state.word) === JSON.stringify(nextState.word)) {
          console.log('shouldUpdate? No!!');
          return false;
        }
      }
    }
    console.log('vis update !');
    if (JSON.stringify(thisWithoutOpState) !== JSON.stringify(nextWithoutOpState) || nextState.draw === 1) {
      this.props = nextProps;
      this.drawwithlabels();
    }
    return true;
  }

  drawWordTree = (d) => {
    const options = {
      maxFontSize: 14,
      wordtree: {
        format: 'implicit',
        word: 'cats',
      },
    };
    const style = {
      float: 'left',
      border: '2px solid gray',
    };
    return (
      <div className="wordTree" style={style}>
        <Chart
          // style={style}
          chartType="WordTree"
          width="100%"
          height="700px"
          data={d}
          options={options}
        />
      </div>
    );
  }

  drawwithlabels() {
    const mat = [
      [
        1,
        0.2038734476641041,
        0.32728144697177336,
        0.22570604312177353,
        0.287189428707074,
        0.2967841921735761,
        0.37620737236349316,
        0.27080978658333893,
        0.2970295364327525,
        0.3002106741573035,
        0.3211769186821559,
        0.3829318567617819,
        0.2536451528612489,
        0.3075681260493351,
        0.31707281482562405,
        0.6151356957649087,
        0.2705225026094434,
        0.34666520052780986,
        0.2582899424499865,
        0.19130182099961268,
        0.30274190843535165,
        0.18354897287481559,
        0.31261139093374707,
        0.24409392106021324,
        0.23945548833189295,
        0.3147549376229356,
        0.13623595505617977,
        0.5002497852723109,
        0.48677560725441765,
        0.3910532395253593,
        0.35525757896968413,
        0.23361764947100794,
        0.24130750740678644,
        0.40890264906093615,
        0.555691603444413,
        0.2580585743230797,
        0.24161023885705796,
        0.3243350472925794,
        0.2729400749063671,
        0.32962872496336104,
        0.2646067415730339,
        0.3248078060319339,
        0.44404014554760296,
        0.25596053713346134,
        0.3146837001693089,
        0.2889574507275743,
        0.4614114406882942,
        0.26382318154937906,
        0.2446309202104966,
        0.33481854578328807,
      ],
      [
        0.2038734476641041,
        1,
        0.15404364569961487,
        0.11948790896159317,
        0.094885100074129,
        0.1660617059891107,
        0.14035087719298245,
        0.1348489567113049,
        0.1411913016073117,
        0.11019736842105263,
        0.23312518584597086,
        0.35668307459295717,
        0.12386780905752753,
        0.2741984271022383,
        0.3521531100478468,
        0.462753036437247,
        0.19614610296232385,
        0.21623899606667915,
        0.13575096277278562,
        0.13284936479128856,
        0.24410840534171252,
        0.07283359914938863,
        0.20834845735027224,
        0.139451192082771,
        0.2040485829959514,
        0.23210904960242335,
        0.23026315789473684,
        0.2508826668856228,
        0.41880323214675674,
        0.26721593703885876,
        0.18073485600794437,
        0.10084517864003073,
        0.25530243519245877,
        0.22658470995005758,
        0.30561803368820917,
        0.08541846419327007,
        0.1317532241199024,
        0.12786202795123403,
        0.10672514619883042,
        0.18306636155606407,
        0.0680161943319838,
        0.23684210526315785,
        0.2510769807079977,
        0.16206675224646983,
        0.10634462869502523,
        0.20707506471095774,
        0.21024089507934693,
        0.14473684210526314,
        0.06528980679546968,
        0.1453720508166969,
      ],
      [
        0.32728144697177336,
        0.15404364569961487,
        1,
        0.6671061305207646,
        0.11920302301614566,
        0.8715607353117868,
        0.7967479674796747,
        0.7411603405974894,
        0.8047319994158033,
        0.8628048780487806,
        0.5548435992834504,
        0.33900684330584324,
        0.15626772546795237,
        0.6092654892066167,
        0.654038644282547,
        0.4838348968105071,
        0.12361721977875519,
        0.40656193038798705,
        0.2439024390243903,
        0.2047098402018504,
        0.3147979614124501,
        0.1560729243656073,
        0.42052144659377644,
        0.11590577444235979,
        0.2309568480300188,
        0.3234485582265896,
        0.24847560975609756,
        0.5198622579049507,
        0.421779172148568,
        0.3754843856849782,
        0.2296364473078693,
        0.09747196012106107,
        0.13736197063463174,
        0.34867366921844395,
        0.552231718898386,
        0.4082367053178729,
        0.695929575189792,
        0.858619264158743,
        0.8036924119241192,
        0.09915164369034994,
        0.6703564727954973,
        0.2750320924261875,
        0.5030813297456819,
        0.8536585365853665,
        0.28566655529568996,
        0.20791683326669336,
        0.6353103010422729,
        0.7613928112965341,
        0.37681383142945357,
        0.20521446593776282,
      ],
      [
        0.22570604312177353,
        0.11948790896159317,
        0.6671061305207646,
        1,
        0.09687856870955462,
        1.0807482359206495,
        0.9261103208471628,
        0.9293139293139293,
        0.9733775691859529,
        0.9228040540540533,
        0.3735684837379753,
        0.3592261326074276,
        0.054494028912633566,
        0.6269804287045667,
        0.6101088101088099,
        0.4238918918918923,
        0.18977994387830457,
        0.3798691930364526,
        0.25972313777191824,
        0.13597390493942219,
        0.3006252521177895,
        0.22945672945672949,
        0.4720410065237651,
        0.06618156618156618,
        0.19667359667359668,
        0.18701795320500358,
        0.3581081081081081,
        0.36956613399671134,
        0.4774812156554893,
        0.29881283152311183,
        0.2078021417644059,
        0.06243835075951864,
        0.09741831383622429,
        0.4985006904714933,
        0.45500628833962165,
        0.4486043420469651,
        0.9787005548594953,
        1.0429073140937541,
        0.9695945945945934,
        0.15746180963572268,
        0.8230769230769224,
        0.15416073968705546,
        0.46518226411464814,
        0.8894199077125904,
        0.30544242873009997,
        0.21178555604785115,
        0.7599519258955264,
        0.8826458036984349,
        0.2714676702018474,
        0.2529978254116186,
      ],
      [
        0.287189428707074,
        0.094885100074129,
        0.11920302301614566,
        0.09687856870955462,
        1,
        0.2281273849996531,
        0.17115558850177087,
        0.2259354946245521,
        0.28101543392089057,
        0.2236795774647888,
        0.27058963953210785,
        0.15614550613030706,
        0.14523419587291192,
        0.24028654686741138,
        0.22096213645509422,
        0.5396576381365114,
        0.22912337412452868,
        0.21883614856398173,
        0.1351769151494332,
        0.14686741136474019,
        0.12097960899726715,
        0.13501209275857162,
        0.22418649830014575,
        0.059347538220777665,
        0.13066088840736728,
        0.20738338906339723,
        0.059419014084507046,
        0.3300960207422381,
        0.3828180702472092,
        0.22989337896538112,
        0.07998937018336433,
        0.1851547239642233,
        0.24777520846471876,
        0.3662794283951884,
        0.4943889357034896,
        0.16647425536827523,
        0.22115474302770272,
        0.2029919630779025,
        0.16823161189358374,
        0.11512553582363748,
        0.18829902491874326,
        0.1305596738324685,
        0.3243947671795899,
        0.17554105118515978,
        0.17431989195446654,
        0.10320942045716923,
        0.3120894564785678,
        0.17939214232765013,
        0.1428953467641291,
        0.21068479844584764,
      ],
      [
        0.2967841921735761,
        0.1660617059891107,
        0.8715607353117868,
        1.0807482359206495,
        0.2281273849996531,
        1,
        1.3556880707515944,
        1.3612965284052856,
        1.3709330108256417,
        1.277678571428574,
        0.632684868219643,
        0.4855937909770706,
        0.14420895864360175,
        0.7196223316912977,
        0.7010300044782801,
        0.47594694960212236,
        0.17995100810250617,
        0.5140157425100357,
        0.3776282590412111,
        0.23251231527093597,
        0.32256819351518273,
        0.249539732298353,
        0.6088669950738915,
        0.15805650288408904,
        0.33671845395983313,
        0.32012616507778985,
        0.396243842364532,
        0.3502532219515381,
        0.5080800441510124,
        0.38125546705952706,
        0.233850729621712,
        0.10035597425479127,
        0.12871602578241795,
        0.3767717809499832,
        0.5608699516745496,
        1.0562868448679645,
        1.6000065246468602,
        1.3663132114330265,
        1.3272441160372195,
        0.19361747697579781,
        1.1996968548692688,
        0.20047964739434782,
        0.5730121721040846,
        1.40775561696504,
        0.5391389432485325,
        0.2871275135266091,
        0.8043448062148032,
        1.3821947109152197,
        0.45164307538816456,
        0.2561576354679801,
      ],
      [
        0.37620737236349316,
        0.14035087719298245,
        0.7967479674796747,
        0.9261103208471628,
        0.17115558850177087,
        1.3556880707515944,
        1,
        1.4703622962732266,
        1.3842490457681123,
        1.3545687134502924,
        0.5758251561106155,
        0.5163027472758637,
        0.1552291581667346,
        0.6769005847953228,
        0.6860028860028867,
        0.43642645074224073,
        0.20439075831655648,
        0.5514349337162595,
        0.30933533019540727,
        0.2331518451300666,
        0.36128567687876423,
        0.2440191387559809,
        0.5429320427505548,
        0.17588843904633375,
        0.3077372919478183,
        0.35323320291135524,
        0.46271929824561403,
        0.4008083130342759,
        0.5325665477663726,
        0.3425971470732904,
        0.36224208319540985,
        0.06428479959021641,
        0.13659771318844377,
        0.34491825671234017,
        0.5387614334982758,
        0.9632825232480107,
        1.2381007706905225,
        1.6849043512736641,
        1.4959795321637388,
        0.24663107042969742,
        1.414664867296443,
        0.20175438596491221,
        0.4607812532517531,
        1.3666381400656094,
        0.5389730032844666,
        0.22351644137666574,
        0.766627342035493,
        1.2456140350877156,
        0.35121030424161653,
        0.23645896350070567,
      ],
      [
        0.27080978658333893,
        0.1348489567113049,
        0.7411603405974894,
        0.9293139293139293,
        0.2259354946245521,
        1.3612965284052856,
        1.4703622962732266,
        1,
        1.452574141657514,
        1.3456360946745576,
        0.5775081068431783,
        0.4766506321569962,
        0.19276179991743508,
        0.6875297558321438,
        0.6557596249903944,
        0.4618224852071006,
        0.1661654864681347,
        0.4951462443934378,
        0.2876316928849762,
        0.15772291369108343,
        0.32122670670317055,
        0.20333512641204954,
        0.5431952662721894,
        0.1913214990138067,
        0.2710059171597633,
        0.32189632909057364,
        0.3463387573964497,
        0.3897294353312593,
        0.5178619656755623,
        0.3657993695736321,
        0.30222172602433844,
        0.05878287910853885,
        0.13164944508228094,
        0.36285578542737396,
        0.5391920520125648,
        0.9720632457076346,
        1.3654140052509915,
        1.5149934810951775,
        1.354331032215647,
        0.24697710316439414,
        1.3461538461538463,
        0.16770476487075678,
        0.47594179704773665,
        1.5798455765622765,
        0.5296668557996265,
        0.1766417693277719,
        0.8066590509440502,
        1.4922921208346303,
        0.4012433525578605,
        0.21591511936339536,
      ],
      [
        0.2970295364327525,
        0.1411913016073117,
        0.8047319994158033,
        0.9733775691859529,
        0.28101543392089057,
        1.3709330108256417,
        1.3842490457681123,
        1.452574141657514,
        1,
        1.5482410179640724,
        0.5562265299908655,
        0.43139620040494564,
        0.11371675254142878,
        0.6519202973363627,
        0.6485263239754263,
        0.4716351911561496,
        0.15539412977324044,
        0.4833251646173839,
        0.27753030524317224,
        0.20524468304769772,
        0.3380105460720352,
        0.2589366721103249,
        0.5558331612636798,
        0.19494344644045242,
        0.2667894979272225,
        0.33303177817027807,
        0.4588323353293413,
        0.4026642502825862,
        0.4902377816980143,
        0.3359029604342713,
        0.2725115806123602,
        0.08571178810262688,
        0.14850895224476424,
        0.29630665675947343,
        0.5415095734457017,
        1.0046137233729273,
        1.2850061466471039,
        1.4198044588788514,
        1.3670159680638698,
        0.09893256964332205,
        1.379180101335788,
        0.19870784746296877,
        0.4914086417911503,
        1.456258215276763,
        0.45697645804281806,
        0.16957887503681163,
        0.7922896073363039,
        1.5942325874566616,
        0.41707723792920465,
        0.17819533347098893,
      ],
      [
        0.3002106741573035,
        0.11019736842105263,
        0.8628048780487806,
        0.9228040540540533,
        0.2236795774647888,
        1.277678571428574,
        1.3545687134502924,
        1.3456360946745576,
        1.5482410179640724,
        1,
        0.5434675141242934,
        0.44613309352518,
        0.11686046511627908,
        0.6395114942528737,
        0.6572240259740254,
        0.496673076923077,
        0.1835382513661203,
        0.48505338078291765,
        0.3032012195121952,
        0.1439655172413793,
        0.3756529850746269,
        0.2447601010101011,
        0.5183189655172413,
        0.16901709401709403,
        0.2947115384615384,
        0.3401828537170263,
        0.35625,
        0.3405323712948517,
        0.5089730290456428,
        0.3513434579439248,
        0.2259433962264151,
        0.10734489051094893,
        0.11977611940298512,
        0.33006386861313836,
        0.46362773029439686,
        0.8129098360655738,
        1.221399006622518,
        1.4172669491525445,
        1.36875,
        0.14918478260869567,
        1.2663461538461533,
        0.22335526315789472,
        0.5104092526690386,
        1.4513719512195147,
        0.4742294520547945,
        0.1612704918032787,
        0.7642353579175695,
        1.5125,
        0.37689873417721503,
        0.18908045977011506,
      ],
      [
        0.3211769186821559,
        0.23312518584597086,
        0.5548435992834504,
        0.3735684837379753,
        0.27058963953210785,
        0.632684868219643,
        0.5758251561106155,
        0.5775081068431783,
        0.5562265299908655,
        0.5434675141242934,
        1,
        0.5351176685770026,
        0.24205754828537662,
        0.6160627313461917,
        0.5265096485435462,
        0.5706353759235112,
        0.29614707789200706,
        0.4128415465347722,
        0.3701253961692158,
        0.22234560685758814,
        0.39438401214267627,
        0.2811162472179422,
        0.7681472822910588,
        0.29284369114877584,
        0.4348109517601044,
        0.3555867170670241,
        0.23852401129943504,
        0.38148814088156724,
        0.4991818458869572,
        0.43686308675220287,
        0.31217354226628286,
        0.20930760031341494,
        0.25659836411164527,
        0.4444348220545161,
        0.5738970173998424,
        0.4510512179309067,
        0.6027799603397314,
        0.587570621468926,
        0.5833333333333326,
        0.4167280766396463,
        0.6051282051282052,
        0.2717811477847159,
        0.5684399943703873,
        0.5893275458178312,
        0.4579366922064847,
        0.30068537556728725,
        0.6365675208647373,
        0.5228218852215282,
        0.40695844954587684,
        0.261835184102864,
      ],
      [
        0.3829318567617819,
        0.35668307459295717,
        0.33900684330584324,
        0.3592261326074276,
        0.15614550613030706,
        0.4855937909770706,
        0.5163027472758637,
        0.4766506321569962,
        0.43139620040494564,
        0.44613309352518,
        0.5351176685770026,
        1,
        0.12099715576376108,
        0.5220375423798896,
        0.4879753340184998,
        0.5850625345877147,
        0.3507095962574206,
        0.4085358048081108,
        0.3129057729426217,
        0.24013892334408354,
        0.3783957908300229,
        0.24642104498219616,
        0.6626891590176135,
        0.23476603332718443,
        0.4086330935251802,
        0.38609112709832166,
        0.23785971223021585,
        0.3492182852781741,
        0.4819964775067914,
        0.326564916291266,
        0.31546083887606896,
        0.1811164207320275,
        0.1653960413758546,
        0.4833797195819985,
        0.5674844739592945,
        0.3825922868262769,
        0.4553813902520367,
        0.4834369792301755,
        0.4239108713029575,
        0.20269002189552707,
        0.3572772551189819,
        0.28923703142748963,
        0.5934441059252239,
        0.503991928408493,
        0.4007588449788114,
        0.22885953532256176,
        0.6160364550008579,
        0.3778398333964409,
        0.40397049449048367,
        0.24222277350533367,
      ],
      [
        0.2536451528612489,
        0.12386780905752753,
        0.15626772546795237,
        0.054494028912633566,
        0.14523419587291192,
        0.14420895864360175,
        0.1552291581667346,
        0.19276179991743508,
        0.11371675254142878,
        0.11686046511627908,
        0.24205754828537662,
        0.12099715576376108,
        1,
        0.20139000267308207,
        0.24343098761703408,
        0.49887656529516994,
        0.15719913584953615,
        0.21838947281304288,
        0.1275382870107771,
        0.16856455493183642,
        0.15461645262061785,
        0.15762273901808788,
        0.15388933440256614,
        0.18087855297157626,
        0.15742397137745975,
        0.20217500418270054,
        0.10770348837209302,
        0.372789609258789,
        0.3554183151597022,
        0.22124538143881778,
        0.12224659938569547,
        0.21975895433712436,
        0.1689459678352425,
        0.3562722797487688,
        0.43839749111066934,
        0.08417842165459398,
        0.11935931002618207,
        0.1405597162002365,
        0.16463178294573647,
        0.28412537917087965,
        0.14347048300536672,
        0.24048347613219098,
        0.30273386852051043,
        0.14583096993760636,
        0.18865880853775086,
        0.17167365611894775,
        0.22165161680875758,
        0.14326805385556915,
        0.12543420665292906,
        0.26639935846030427,
      ],
      [
        0.3075681260493351,
        0.2741984271022383,
        0.6092654892066167,
        0.6269804287045667,
        0.24028654686741138,
        0.7196223316912977,
        0.6769005847953228,
        0.6875297558321438,
        0.6519202973363627,
        0.6395114942528737,
        0.6160627313461917,
        0.5220375423798896,
        0.20139000267308207,
        1,
        0.7722346618898356,
        0.4810574712643699,
        0.27053891087243276,
        0.6270708062338938,
        0.4227642276422769,
        0.2293103448275861,
        0.36790186996054264,
        0.289707419017764,
        0.6310344827586217,
        0.19989684644857053,
        0.3802829354553492,
        0.43849747787976573,
        0.45797413793103453,
        0.5013269496297103,
        0.5744789431010642,
        0.4056558169513372,
        0.29988072001734983,
        0.17270744189948817,
        0.19488763081145996,
        0.4736177531672119,
        0.5418754298064657,
        0.6055681175805544,
        0.6773426200806885,
        0.7139586986167934,
        0.5704022988505746,
        0.2346326836581709,
        0.5232979664014147,
        0.3209316394434363,
        0.6318259909191319,
        0.6326745164003372,
        0.40107857030388977,
        0.3030431505558698,
        0.7370035155957825,
        0.5744857834240779,
        0.4100829332169359,
        0.3574712643678163,
      ],
      [
        0.31707281482562405,
        0.3521531100478468,
        0.654038644282547,
        0.6101088101088099,
        0.22096213645509422,
        0.7010300044782801,
        0.6860028860028867,
        0.6557596249903944,
        0.6485263239754263,
        0.6572240259740254,
        0.5265096485435462,
        0.4879753340184998,
        0.24343098761703408,
        0.7722346618898356,
        1,
        0.5451508491508501,
        0.3029451422894047,
        0.661404076350695,
        0.3666613873930949,
        0.30828481862964646,
        0.3519965109517351,
        0.2978354978354979,
        0.665158978952083,
        0.2804528804528804,
        0.45564435564435557,
        0.5095331526986203,
        0.4165584415584416,
        0.5321312073262155,
        0.5414021662984315,
        0.4741837601650677,
        0.30242587601078164,
        0.13385154990994408,
        0.3669574206887638,
        0.4430562138591329,
        0.5783673117006461,
        0.6044709388971686,
        0.6566956222585362,
        0.678274268104776,
        0.6461399711399705,
        0.4172783738001129,
        0.6412587412587407,
        0.32342788790157223,
        0.5990017100337383,
        0.7040703199239788,
        0.44634406689201256,
        0.2440493932297212,
        0.6617009888159562,
        0.6013157894736845,
        0.4060825250698668,
        0.3569189431258395,
      ],
      [
        0.6151356957649087,
        0.462753036437247,
        0.4838348968105071,
        0.4238918918918923,
        0.5396576381365114,
        0.47594694960212236,
        0.43642645074224073,
        0.4618224852071006,
        0.4716351911561496,
        0.496673076923077,
        0.5706353759235112,
        0.5850625345877147,
        0.49887656529516994,
        0.4810574712643699,
        0.5451508491508501,
        1,
        0.5475577973938639,
        0.5462447303586091,
        0.5115834896810515,
        0.40292838196286535,
        0.6217680826636047,
        0.4646029526029532,
        0.5581856763925739,
        0.47411965811965906,
        0.5430769230769237,
        0.6543220807968992,
        0.4179423076923078,
        0.6393922956918278,
        0.8654580274497242,
        0.631492451473759,
        0.5767082728592163,
        0.48788770353733873,
        0.6351595866819736,
        0.7778955642897245,
        0.8421120607787282,
        0.4307591424968477,
        0.42425267447784015,
        0.46216427640156527,
        0.45077777777777783,
        0.4440133779264215,
        0.43784615384615455,
        0.5748866396761136,
        0.7552367916780701,
        0.42302814258911886,
        0.5626891464699684,
        0.5621538461538468,
        0.6769150675788408,
        0.47397570850202503,
        0.5417604673807206,
        0.657273209549072,
      ],
      [
        0.2705225026094434,
        0.19614610296232385,
        0.12361721977875519,
        0.18977994387830457,
        0.22912337412452868,
        0.17995100810250617,
        0.20439075831655648,
        0.1661654864681347,
        0.15539412977324044,
        0.1835382513661203,
        0.29614707789200706,
        0.3507095962574206,
        0.15719913584953615,
        0.27053891087243276,
        0.3029451422894047,
        0.5475577973938639,
        1,
        0.30272446181669677,
        0.16733306677329077,
        0.1661579046542303,
        0.24455590897969193,
        0.09885742672627919,
        0.26276615790465446,
        0.2887767969735184,
        0.15241698192517866,
        0.3480756378503757,
        0.18903688524590165,
        0.35824318218630413,
        0.45969208443870047,
        0.283169909606251,
        0.17032683781833177,
        0.26073949982050976,
        0.2083027485523205,
        0.4348131307087869,
        0.38175081344480283,
        0.2131147540983607,
        0.17037599971049117,
        0.16689821246642592,
        0.14344262295081972,
        0.34259919220717505,
        0.1524169819251787,
        0.21131722749496692,
        0.44649281449934863,
        0.16250166600026664,
        0.22988247623325106,
        0.18306010928961755,
        0.3607861266194899,
        0.1587935001438021,
        0.2911046551843398,
        0.2817787827397777,
      ],
      [
        0.34666520052780986,
        0.21623899606667915,
        0.40656193038798705,
        0.3798691930364526,
        0.21883614856398173,
        0.5140157425100357,
        0.5514349337162595,
        0.4951462443934378,
        0.4833251646173839,
        0.48505338078291765,
        0.4128415465347722,
        0.4085358048081108,
        0.21838947281304288,
        0.6270708062338938,
        0.661404076350695,
        0.5462447303586091,
        0.30272446181669677,
        1,
        0.3389896710355003,
        0.15393299791385445,
        0.35686779625006637,
        0.26366871562601096,
        0.5605595778623143,
        0.22003224138455446,
        0.3956200383246643,
        0.4716710617271304,
        0.3552046263345195,
        0.40350653172034334,
        0.5649325910721921,
        0.40709083047859684,
        0.25736923386826016,
        0.23139465412889298,
        0.3470547617782968,
        0.4336961321661417,
        0.5685365993788296,
        0.41683682398926547,
        0.48207678348377325,
        0.4901381265456299,
        0.4482502965599045,
        0.4739285161689616,
        0.48149466192170765,
        0.26767653118561513,
        0.5053380782918141,
        0.4838338685877961,
        0.29525179154682396,
        0.25290239775975726,
        0.6663372986158813,
        0.3959074733096084,
        0.32352808685075896,
        0.33892093099357745,
      ],
      [
        0.2582899424499865,
        0.13575096277278562,
        0.2439024390243903,
        0.25972313777191824,
        0.1351769151494332,
        0.3776282590412111,
        0.30933533019540727,
        0.2876316928849762,
        0.27753030524317224,
        0.3032012195121952,
        0.3701253961692158,
        0.3129057729426217,
        0.1275382870107771,
        0.4227642276422769,
        0.3666613873930949,
        0.5115834896810515,
        0.16733306677329077,
        0.3389896710355003,
        1,
        0.20870479394449126,
        0.30706224972697516,
        0.11948755851194875,
        0.4033221194280912,
        0.20747342088805507,
        0.33705440900562844,
        0.3191349359536762,
        0.19283536585365857,
        0.38600129371028535,
        0.44775832405626964,
        0.3382721677684065,
        0.31178094799815925,
        0.15956026348584657,
        0.18213809003761688,
        0.3910094356418015,
        0.41173881824288366,
        0.2595961615353859,
        0.3201017606202553,
        0.31493730191539215,
        0.2494918699186993,
        0.3409331919406151,
        0.31876172607879927,
        0.1389602053915276,
        0.41467754535196605,
        0.32317073170731725,
        0.27188439692616106,
        0.20011995201919236,
        0.43192159145018805,
        0.29204107830551995,
        0.19272923741895656,
        0.30836837678721607,
      ],
      [
        0.19130182099961268,
        0.13284936479128856,
        0.2047098402018504,
        0.13597390493942219,
        0.14686741136474019,
        0.23251231527093597,
        0.2331518451300666,
        0.15772291369108343,
        0.20524468304769772,
        0.1439655172413793,
        0.22234560685758814,
        0.24013892334408354,
        0.16856455493183642,
        0.2293103448275861,
        0.30828481862964646,
        0.40292838196286535,
        0.1661579046542303,
        0.15393299791385445,
        0.20870479394449126,
        1,
        0.15941842511580034,
        0.10888192267502612,
        0.2379310344827587,
        0.10810492189802534,
        0.19575596816976124,
        0.18799305383279583,
        0.2739224137931035,
        0.23547259131744572,
        0.27208470453569905,
        0.2608604576216563,
        0.10305790500975925,
        0.1557513214195822,
        0.19492194201406762,
        0.25799144223508674,
        0.39800897272161656,
        0.1932165065008479,
        0.1619547841973053,
        0.23023572959283078,
        0.16613984674329504,
        0.1442278860569715,
        0.13209549071618037,
        0.07459165154264971,
        0.3988710271198921,
        0.16122792262405383,
        0.1717524799244213,
        0.13583945732052005,
        0.2595706485152217,
        0.13443738656987297,
        0.1845918812745527,
        0.13103448275862067,
      ],
      [
        0.30274190843535165,
        0.24410840534171252,
        0.3147979614124501,
        0.3006252521177895,
        0.12097960899726715,
        0.32256819351518273,
        0.36128567687876423,
        0.32122670670317055,
        0.3380105460720352,
        0.3756529850746269,
        0.39438401214267627,
        0.3783957908300229,
        0.15461645262061785,
        0.36790186996054264,
        0.3519965109517351,
        0.6217680826636047,
        0.24455590897969193,
        0.35686779625006637,
        0.30706224972697516,
        0.15941842511580034,
        1,
        0.17345092718227048,
        0.4187339166237782,
        0.1927222860058681,
        0.29701492537313456,
        0.42718959161029413,
        0.24113805970149255,
        0.41184483200223615,
        0.5544280671332134,
        0.3780862044915607,
        0.3201210926499578,
        0.12506809020590479,
        0.2711442786069654,
        0.45747358100010876,
        0.5322745248118393,
        0.32199657450452657,
        0.3052041118908769,
        0.36234083818197177,
        0.30483001658374803,
        0.2795262816353018,
        0.3238231917336397,
        0.22309505106048702,
        0.4974947327419843,
        0.33008736803785976,
        0.3317317521979146,
        0.32878639588940567,
        0.5765127723637774,
        0.35909269442262404,
        0.38376157188739846,
        0.3098387373477441,
      ],
      [
        0.18354897287481559,
        0.07283359914938863,
        0.1560729243656073,
        0.22945672945672949,
        0.13501209275857162,
        0.249539732298353,
        0.2440191387559809,
        0.20333512641204954,
        0.2589366721103249,
        0.2447601010101011,
        0.2811162472179422,
        0.24642104498219616,
        0.15762273901808788,
        0.289707419017764,
        0.2978354978354979,
        0.4646029526029532,
        0.09885742672627919,
        0.26366871562601096,
        0.11948755851194875,
        0.10888192267502612,
        0.17345092718227048,
        1,
        0.30891675374434013,
        0.11188811188811187,
        0.21351981351981358,
        0.23217789404839778,
        0.24810606060606064,
        0.20061772167856412,
        0.43695041703340465,
        0.2681959784763523,
        0.08690680388793595,
        0.08700140087001401,
        0.10553294135383688,
        0.2977807269778072,
        0.41241474574807935,
        0.1324722636198046,
        0.2268379155796375,
        0.21160760143810997,
        0.24621212121212127,
        0.20421607378129117,
        0.24188034188034194,
        0.21683944710260503,
        0.36295337718825266,
        0.21686375954668644,
        0.2510031825100319,
        0.10978638847491305,
        0.41793203181489536,
        0.20933014354066987,
        0.13144099220048588,
        0.25259491466388023,
      ],
      [
        0.31261139093374707,
        0.20834845735027224,
        0.42052144659377644,
        0.4720410065237651,
        0.22418649830014575,
        0.6088669950738915,
        0.5429320427505548,
        0.5431952662721894,
        0.5558331612636798,
        0.5183189655172413,
        0.7681472822910588,
        0.6626891590176135,
        0.15388933440256614,
        0.6310344827586217,
        0.665158978952083,
        0.5581856763925739,
        0.26276615790465446,
        0.5605595778623143,
        0.4033221194280912,
        0.2379310344827587,
        0.4187339166237782,
        0.30891675374434013,
        1,
        0.37185381668140316,
        0.37639257294429707,
        0.3965021086579014,
        0.2741379310344828,
        0.4075636128893438,
        0.5368722277865219,
        0.4289558491782141,
        0.3708523096942095,
        0.1462119305310848,
        0.22935323383084588,
        0.49770953939088813,
        0.5332023446965987,
        0.43736574335782946,
        0.5936286823475678,
        0.5766218585622446,
        0.5196360153256703,
        0.28500749625187405,
        0.5108753315649864,
        0.35471869328493666,
        0.6230948582648178,
        0.5425147182506312,
        0.4464336324988196,
        0.293273035613341,
        0.7538559353728777,
        0.5314428312159714,
        0.41178524661719756,
        0.26781609195402295,
      ],
      [
        0.24409392106021324,
        0.139451192082771,
        0.11590577444235979,
        0.06618156618156618,
        0.059347538220777665,
        0.15805650288408904,
        0.17588843904633375,
        0.1913214990138067,
        0.19494344644045242,
        0.16901709401709403,
        0.29284369114877584,
        0.23476603332718443,
        0.18087855297157626,
        0.19989684644857053,
        0.2804528804528804,
        0.47411965811965906,
        0.2887767969735184,
        0.22003224138455446,
        0.20747342088805507,
        0.10810492189802534,
        0.1927222860058681,
        0.11188811188811187,
        0.37185381668140316,
        1,
        0.15384615384615385,
        0.3222037754411856,
        0.07959401709401709,
        0.3716548661946481,
        0.472745327517112,
        0.30086268871315597,
        0.17303660699887113,
        0.1743090648200137,
        0.16724071947952548,
        0.3018778464033937,
        0.3627730294396964,
        0.13324926439680537,
        0.16686477613629935,
        0.15616398667246126,
        0.13942307692307693,
        0.2601263470828688,
        0.14615384615384613,
        0.21834233018443538,
        0.40949600024333144,
        0.17573483427141967,
        0.2617375014635288,
        0.10081266638643688,
        0.3477761091643955,
        0.22031039136302286,
        0.23801795953694693,
        0.22316534040671976,
      ],
      [
        0.23945548833189295,
        0.2040485829959514,
        0.2309568480300188,
        0.19667359667359668,
        0.13066088840736728,
        0.33671845395983313,
        0.3077372919478183,
        0.2710059171597633,
        0.2667894979272225,
        0.2947115384615384,
        0.4348109517601044,
        0.4086330935251802,
        0.15742397137745975,
        0.3802829354553492,
        0.45564435564435557,
        0.5430769230769237,
        0.15241698192517866,
        0.3956200383246643,
        0.33705440900562844,
        0.19575596816976124,
        0.29701492537313456,
        0.21351981351981358,
        0.37639257294429707,
        0.15384615384615385,
        1,
        0.45596753366537524,
        0.2725961538461539,
        0.29161166446657866,
        0.5040217044366414,
        0.3787562904385335,
        0.2124818577648766,
        0.13531723750701852,
        0.13934175277458863,
        0.43559797866367184,
        0.5163342830009496,
        0.2167717528373266,
        0.2830871115639328,
        0.262755323772273,
        0.2480769230769231,
        0.24816053511705685,
        0.2615384615384615,
        0.24038461538461536,
        0.5079113057760737,
        0.3415572232645403,
        0.24720758693361433,
        0.20605296343001264,
        0.4751209744702159,
        0.2678137651821862,
        0.3351509250243429,
        0.20901856763925736,
      ],
      [
        0.3147549376229356,
        0.23210904960242335,
        0.3234485582265896,
        0.18701795320500358,
        0.20738338906339723,
        0.32012616507778985,
        0.35323320291135524,
        0.32189632909057364,
        0.33303177817027807,
        0.3401828537170263,
        0.3555867170670241,
        0.38609112709832166,
        0.20217500418270054,
        0.43849747787976573,
        0.5095331526986203,
        0.6543220807968992,
        0.3480756378503757,
        0.4716710617271304,
        0.3191349359536762,
        0.18799305383279583,
        0.42718959161029413,
        0.23217789404839778,
        0.3965021086579014,
        0.3222037754411856,
        0.45596753366537524,
        1,
        0.30762889688249406,
        0.38154188038025133,
        0.6061116252226422,
        0.4405578341065454,
        0.19619021763721098,
        0.23263141311768107,
        0.27520670031139277,
        0.5049729559418146,
        0.5966577165617936,
        0.24908597711994343,
        0.27484237775342657,
        0.33321139698410773,
        0.3267386091127098,
        0.41288708163903654,
        0.3651540306216564,
        0.35551558752997603,
        0.5219454329774604,
        0.2925513247938237,
        0.36339147859794385,
        0.294649526280615,
        0.5335653386184758,
        0.3207749589801844,
        0.356282062957229,
        0.3949392210369632,
      ],
      [
        0.13623595505617977,
        0.23026315789473684,
        0.24847560975609756,
        0.3581081081081081,
        0.059419014084507046,
        0.396243842364532,
        0.46271929824561403,
        0.3463387573964497,
        0.4588323353293413,
        0.35625,
        0.23852401129943504,
        0.23785971223021585,
        0.10770348837209302,
        0.45797413793103453,
        0.4165584415584416,
        0.4179423076923078,
        0.18903688524590165,
        0.3552046263345195,
        0.19283536585365857,
        0.2739224137931035,
        0.24113805970149255,
        0.24810606060606064,
        0.2741379310344828,
        0.07959401709401709,
        0.2725961538461539,
        0.30762889688249406,
        1,
        0.23123049921996874,
        0.4574170124481327,
        0.2686915887850467,
        0.10023584905660377,
        0.0770985401459854,
        0.19107587064676618,
        0.36126824817518244,
        0.2604463437796771,
        0.14293032786885246,
        0.4052152317880795,
        0.45974576271186446,
        0.43402777777777773,
        0.11820652173913043,
        0.3192307692307692,
        0.07565789473684209,
        0.46003855278766304,
        0.39786585365853666,
        0.08304794520547945,
        0.23668032786885246,
        0.3007727765726681,
        0.24671052631578944,
        0.1566455696202532,
        0.2996408045977011,
      ],
      [
        0.5002497852723109,
        0.2508826668856228,
        0.5198622579049507,
        0.36956613399671134,
        0.3300960207422381,
        0.3502532219515381,
        0.4008083130342759,
        0.3897294353312593,
        0.4026642502825862,
        0.3405323712948517,
        0.38148814088156724,
        0.3492182852781741,
        0.372789609258789,
        0.5013269496297103,
        0.5321312073262155,
        0.6393922956918278,
        0.35824318218630413,
        0.40350653172034334,
        0.38600129371028535,
        0.23547259131744572,
        0.41184483200223615,
        0.20061772167856412,
        0.4075636128893438,
        0.3716548661946481,
        0.29161166446657866,
        0.38154188038025133,
        0.23123049921996874,
        1,
        0.6198911192962233,
        0.4722833773164003,
        0.2718040797103582,
        0.2667820581436396,
        0.3159242787621952,
        0.47940831501873177,
        0.582935910028995,
        0.40277742257231297,
        0.3257430959490034,
        0.3727579611659046,
        0.3153709481712601,
        0.27179000203486403,
        0.3546021840873639,
        0.38219476147466985,
        0.4301774917971807,
        0.34445036338038904,
        0.3977518004829781,
        0.3176645098590831,
        0.5222148148398823,
        0.3065009442482964,
        0.42271766820039897,
        0.47735757706170334,
      ],
      [
        0.48677560725441765,
        0.41880323214675674,
        0.421779172148568,
        0.4774812156554893,
        0.3828180702472092,
        0.5080800441510124,
        0.5325665477663726,
        0.5178619656755623,
        0.4902377816980143,
        0.5089730290456428,
        0.4991818458869572,
        0.4819964775067914,
        0.3554183151597022,
        0.5744789431010642,
        0.5414021662984315,
        0.8654580274497242,
        0.45969208443870047,
        0.5649325910721921,
        0.44775832405626964,
        0.27208470453569905,
        0.5544280671332134,
        0.43695041703340465,
        0.5368722277865219,
        0.472745327517112,
        0.5040217044366414,
        0.6061116252226422,
        0.4574170124481327,
        0.6198911192962233,
        1,
        0.5588940163648334,
        0.3972755030141704,
        0.43831359602628905,
        0.40801800127990695,
        0.6494714843868303,
        0.7220153444219849,
        0.4166791374736413,
        0.5100656755791263,
        0.5321565042079845,
        0.5347683264177034,
        0.5358470142522098,
        0.49677625279284987,
        0.4331513430880104,
        0.5786250449146729,
        0.4860388624633135,
        0.48149832319672636,
        0.5583973879327938,
        0.5581479914672226,
        0.48151343088010473,
        0.44312726508745154,
        0.5712691372156236,
      ],
      [
        0.3910532395253593,
        0.26721593703885876,
        0.3754843856849782,
        0.29881283152311183,
        0.22989337896538112,
        0.38125546705952706,
        0.3425971470732904,
        0.3657993695736321,
        0.3359029604342713,
        0.3513434579439248,
        0.43686308675220287,
        0.326564916291266,
        0.22124538143881778,
        0.4056558169513372,
        0.4741837601650677,
        0.631492451473759,
        0.283169909606251,
        0.40709083047859684,
        0.3382721677684065,
        0.2608604576216563,
        0.3780862044915607,
        0.2681959784763523,
        0.4289558491782141,
        0.30086268871315597,
        0.3787562904385335,
        0.4405578341065454,
        0.2686915887850467,
        0.4722833773164003,
        0.5588940163648334,
        1,
        0.19083935813789454,
        0.2335936967050958,
        0.33399590830892223,
        0.4716147076881075,
        0.5361650291556825,
        0.3418109391757315,
        0.3462895339481337,
        0.3486720523786893,
        0.31542056074766334,
        0.32537586347013403,
        0.36707404744787925,
        0.30736596163305446,
        0.5173335107149569,
        0.301800775017096,
        0.3238381769299703,
        0.38853991113834835,
        0.4859356944472591,
        0.3309149040826364,
        0.4112741038684485,
        0.34304973681383577,
      ],
      [
        0.35525757896968413,
        0.18073485600794437,
        0.2296364473078693,
        0.2078021417644059,
        0.07998937018336433,
        0.233850729621712,
        0.36224208319540985,
        0.30222172602433844,
        0.2725115806123602,
        0.2259433962264151,
        0.31217354226628286,
        0.31546083887606896,
        0.12224659938569547,
        0.29988072001734983,
        0.30242587601078164,
        0.5767082728592163,
        0.17032683781833177,
        0.25736923386826016,
        0.31178094799815925,
        0.10305790500975925,
        0.3201210926499578,
        0.08690680388793595,
        0.3708523096942095,
        0.17303660699887113,
        0.2124818577648766,
        0.19619021763721098,
        0.10023584905660377,
        0.2718040797103582,
        0.3972755030141704,
        0.19083935813789454,
        1,
        0.02616719460129459,
        0.14305829343846804,
        0.3964467704172977,
        0.38223225644609293,
        0.2632230126817197,
        0.21054604523303763,
        0.33002878157978893,
        0.2789570230607966,
        0.1681706316652994,
        0.28098693759071114,
        0.07634061569016881,
        0.46491640367958087,
        0.2807179015186378,
        0.32230550529852675,
        0.2058459635013919,
        0.5207301600294683,
        0.24875868917576957,
        0.32147122044423215,
        0.21396660160485786,
      ],
      [
        0.23361764947100794,
        0.10084517864003073,
        0.09747196012106107,
        0.06243835075951864,
        0.1851547239642233,
        0.10035597425479127,
        0.06428479959021641,
        0.05878287910853885,
        0.08571178810262688,
        0.10734489051094893,
        0.20930760031341494,
        0.1811164207320275,
        0.21975895433712436,
        0.17270744189948817,
        0.13385154990994408,
        0.48788770353733873,
        0.26073949982050976,
        0.23139465412889298,
        0.15956026348584657,
        0.1557513214195822,
        0.12506809020590479,
        0.08700140087001401,
        0.1462119305310848,
        0.1743090648200137,
        0.13531723750701852,
        0.23263141311768107,
        0.0770985401459854,
        0.2667820581436396,
        0.43831359602628905,
        0.2335936967050958,
        0.02616719460129459,
        1,
        0.14729273341322588,
        0.3751824817518243,
        0.3752989373427329,
        0.047385425391887045,
        0.11069753951757144,
        0.05179595034846797,
        0.04273114355231143,
        0.14503332275468106,
        0.04497473329590118,
        0.151219746446408,
        0.3813024391511024,
        0.04019049314580737,
        0.14833516648335165,
        0.1321646523872203,
        0.1826559209588802,
        0.06939108720706877,
        0.12362561212233211,
        0.2614481080627567,
      ],
      [
        0.24130750740678644,
        0.25530243519245877,
        0.13736197063463174,
        0.09741831383622429,
        0.24777520846471876,
        0.12871602578241795,
        0.13659771318844377,
        0.13164944508228094,
        0.14850895224476424,
        0.11977611940298512,
        0.25659836411164527,
        0.1653960413758546,
        0.1689459678352425,
        0.19488763081145996,
        0.3669574206887638,
        0.6351595866819736,
        0.2083027485523205,
        0.3470547617782968,
        0.18213809003761688,
        0.19492194201406762,
        0.2711442786069654,
        0.10553294135383688,
        0.22935323383084588,
        0.16724071947952548,
        0.13934175277458863,
        0.27520670031139277,
        0.19107587064676618,
        0.3159242787621952,
        0.40801800127990695,
        0.33399590830892223,
        0.14305829343846804,
        0.14729273341322588,
        1,
        0.382852162544939,
        0.48895125512040893,
        0.1331865263844711,
        0.12095153372211792,
        0.12817269584281982,
        0.12116500829187399,
        0.33419857235561323,
        0.08867202449292003,
        0.26911495155799947,
        0.35881092756856253,
        0.11682441451280187,
        0.13194302460301235,
        0.19757768534377299,
        0.3183108319573499,
        0.12709478921183553,
        0.1342968700799799,
        0.3361468519471606,
      ],
      [
        0.40890264906093615,
        0.22658470995005758,
        0.34867366921844395,
        0.4985006904714933,
        0.3662794283951884,
        0.3767717809499832,
        0.34491825671234017,
        0.36285578542737396,
        0.29630665675947343,
        0.33006386861313836,
        0.4444348220545161,
        0.4833797195819985,
        0.3562722797487688,
        0.4736177531672119,
        0.4430562138591329,
        0.7778955642897245,
        0.4348131307087869,
        0.4336961321661417,
        0.3910094356418015,
        0.25799144223508674,
        0.45747358100010876,
        0.2977807269778072,
        0.49770953939088813,
        0.3018778464033937,
        0.43559797866367184,
        0.5049729559418146,
        0.36126824817518244,
        0.47940831501873177,
        0.6494714843868303,
        0.4716147076881075,
        0.3964467704172977,
        0.3751824817518243,
        0.382852162544939,
        1,
        0.6708119311525664,
        0.36436520282397983,
        0.3218349688209983,
        0.34855870345168855,
        0.30839416058394137,
        0.5450967946683593,
        0.2983155530600786,
        0.35004802151363795,
        0.5803188127213366,
        0.36859533558839225,
        0.36650334966503306,
        0.35493598181165475,
        0.49559668761974046,
        0.3244717633499806,
        0.3451445994641039,
        0.39882540481583895,
      ],
      [
        0.555691603444413,
        0.30561803368820917,
        0.552231718898386,
        0.45500628833962165,
        0.4943889357034896,
        0.5608699516745496,
        0.5387614334982758,
        0.5391920520125648,
        0.5415095734457017,
        0.46362773029439686,
        0.5738970173998424,
        0.5674844739592945,
        0.43839749111066934,
        0.5418754298064657,
        0.5783673117006461,
        0.8421120607787282,
        0.38175081344480283,
        0.5685365993788296,
        0.41173881824288366,
        0.39800897272161656,
        0.5322745248118393,
        0.41241474574807935,
        0.5332023446965987,
        0.3627730294396964,
        0.5163342830009496,
        0.5966577165617936,
        0.2604463437796771,
        0.582935910028995,
        0.7220153444219849,
        0.5361650291556825,
        0.38223225644609293,
        0.3752989373427329,
        0.48895125512040893,
        0.6708119311525664,
        1,
        0.5991624242990367,
        0.5026634717583944,
        0.515749995975985,
        0.5093779677113007,
        0.49060654857756303,
        0.5231718898385564,
        0.49431448992852567,
        0.6775455992537854,
        0.5075510156810975,
        0.5405755245937902,
        0.4801114691825081,
        0.658480161010892,
        0.4885477582846009,
        0.42660511858824085,
        0.498876772439991,
      ],
      [
        0.2580585743230797,
        0.08541846419327007,
        0.4082367053178729,
        0.4486043420469651,
        0.16647425536827523,
        1.0562868448679645,
        0.9632825232480107,
        0.9720632457076346,
        1.0046137233729273,
        0.8129098360655738,
        0.4510512179309067,
        0.3825922868262769,
        0.08417842165459398,
        0.6055681175805544,
        0.6044709388971686,
        0.4307591424968477,
        0.2131147540983607,
        0.41683682398926547,
        0.2595961615353859,
        0.1932165065008479,
        0.32199657450452657,
        0.1324722636198046,
        0.43736574335782946,
        0.13324926439680537,
        0.2167717528373266,
        0.24908597711994343,
        0.14293032786885246,
        0.40277742257231297,
        0.4166791374736413,
        0.3418109391757315,
        0.2632230126817197,
        0.047385425391887045,
        0.1331865263844711,
        0.36436520282397983,
        0.5991624242990367,
        1,
        0.8752578438823153,
        0.9783273131425394,
        0.8743169398907102,
        0.10334996436208126,
        0.9035308953341739,
        0.11486194995685939,
        0.5451840616066742,
        0.954118352658937,
        0.4225241410285203,
        0.23770491803278687,
        0.69958394082714,
        0.823986194995686,
        0.4153351317700768,
        0.14953834558130774,
      ],
      [
        0.24161023885705796,
        0.1317532241199024,
        0.695929575189792,
        0.9787005548594953,
        0.22115474302770272,
        1.6000065246468602,
        1.2381007706905225,
        1.3654140052509915,
        1.2850061466471039,
        1.221399006622518,
        0.6027799603397314,
        0.4553813902520367,
        0.11935931002618207,
        0.6773426200806885,
        0.6566956222585362,
        0.42425267447784015,
        0.17037599971049117,
        0.48207678348377325,
        0.3201017606202553,
        0.1619547841973053,
        0.3052041118908769,
        0.2268379155796375,
        0.5936286823475678,
        0.16686477613629935,
        0.2830871115639328,
        0.27484237775342657,
        0.4052152317880795,
        0.3257430959490034,
        0.5100656755791263,
        0.3462895339481337,
        0.21054604523303763,
        0.11069753951757144,
        0.12095153372211792,
        0.3218349688209983,
        0.5026634717583944,
        0.8752578438823153,
        1,
        1.249822277098066,
        1.2819168506254597,
        0.24388137057299167,
        1.091339786041773,
        0.20473161380271873,
        0.5537303700910494,
        1.3798659344209352,
        0.5646829356799414,
        0.215991748995766,
        0.7359900015802106,
        1.2937434646218193,
        0.2987677089445889,
        0.2760143107254321,
      ],
      [
        0.3243350472925794,
        0.12786202795123403,
        0.858619264158743,
        1.0429073140937541,
        0.2029919630779025,
        1.3663132114330265,
        1.6849043512736641,
        1.5149934810951775,
        1.4198044588788514,
        1.4172669491525445,
        0.587570621468926,
        0.4834369792301755,
        0.1405597162002365,
        0.7139586986167934,
        0.678274268104776,
        0.46216427640156527,
        0.16689821246642592,
        0.4901381265456299,
        0.31493730191539215,
        0.23023572959283078,
        0.36234083818197177,
        0.21160760143810997,
        0.5766218585622446,
        0.15616398667246126,
        0.262755323772273,
        0.33321139698410773,
        0.45974576271186446,
        0.3727579611659046,
        0.5321565042079845,
        0.3486720523786893,
        0.33002878157978893,
        0.05179595034846797,
        0.12817269584281982,
        0.34855870345168855,
        0.515749995975985,
        0.9783273131425394,
        1.249822277098066,
        1,
        1.5048258003766464,
        0.23999017440432327,
        1.4019991308126896,
        0.19759143621766276,
        0.4957476325471982,
        1.3913807358412569,
        0.4927637179784844,
        0.22520144484579058,
        0.7718543573905888,
        1.3197665774605987,
        0.3939426446399198,
        0.22696278979154483,
      ],
      [
        0.2729400749063671,
        0.10672514619883042,
        0.8036924119241192,
        0.9695945945945934,
        0.16823161189358374,
        1.3272441160372195,
        1.4959795321637388,
        1.354331032215647,
        1.3670159680638698,
        1.36875,
        0.5833333333333326,
        0.4239108713029575,
        0.16463178294573647,
        0.5704022988505746,
        0.6461399711399705,
        0.45077777777777783,
        0.14344262295081972,
        0.4482502965599045,
        0.2494918699186993,
        0.16613984674329504,
        0.30483001658374803,
        0.24621212121212127,
        0.5196360153256703,
        0.13942307692307693,
        0.2480769230769231,
        0.3267386091127098,
        0.43402777777777773,
        0.3153709481712601,
        0.5347683264177034,
        0.31542056074766334,
        0.2789570230607966,
        0.04273114355231143,
        0.12116500829187399,
        0.30839416058394137,
        0.5093779677113007,
        0.8743169398907102,
        1.2819168506254597,
        1.5048258003766464,
        1,
        0.14432367149758454,
        1.3743589743589713,
        0.23062865497076018,
        0.4832690786872275,
        1.3147018970189692,
        0.4968607305936073,
        0.1779371584699454,
        0.6978338153771984,
        1.297514619883038,
        0.339398734177215,
        0.2334291187739465,
      ],
      [
        0.32962872496336104,
        0.18306636155606407,
        0.09915164369034994,
        0.15746180963572268,
        0.11512553582363748,
        0.19361747697579781,
        0.24663107042969742,
        0.24697710316439414,
        0.09893256964332205,
        0.14918478260869567,
        0.4167280766396463,
        0.20269002189552707,
        0.28412537917087965,
        0.2346326836581709,
        0.4172783738001129,
        0.4440133779264215,
        0.34259919220717505,
        0.4739285161689616,
        0.3409331919406151,
        0.1442278860569715,
        0.2795262816353018,
        0.20421607378129117,
        0.28500749625187405,
        0.2601263470828688,
        0.24816053511705685,
        0.41288708163903654,
        0.11820652173913043,
        0.27179000203486403,
        0.5358470142522098,
        0.32537586347013403,
        0.1681706316652994,
        0.14503332275468106,
        0.33419857235561323,
        0.5450967946683593,
        0.49060654857756303,
        0.10334996436208126,
        0.24388137057299167,
        0.23999017440432327,
        0.14432367149758454,
        1,
        0.19698996655518394,
        0.29376430205949655,
        0.40553922327092673,
        0.24178154825026513,
        0.40262060750446693,
        0.09515324305060584,
        0.4173347165896445,
        0.193649885583524,
        0.14309301045679693,
        0.2723638180909545,
      ],
      [
        0.2646067415730339,
        0.0680161943319838,
        0.6703564727954973,
        0.8230769230769224,
        0.18829902491874326,
        1.1996968548692688,
        1.414664867296443,
        1.3461538461538463,
        1.379180101335788,
        1.2663461538461533,
        0.6051282051282052,
        0.3572772551189819,
        0.14347048300536672,
        0.5232979664014147,
        0.6412587412587407,
        0.43784615384615455,
        0.1524169819251787,
        0.48149466192170765,
        0.31876172607879927,
        0.13209549071618037,
        0.3238231917336397,
        0.24188034188034194,
        0.5108753315649864,
        0.14615384615384613,
        0.2615384615384615,
        0.3651540306216564,
        0.3192307692307692,
        0.3546021840873639,
        0.49677625279284987,
        0.36707404744787925,
        0.28098693759071114,
        0.04497473329590118,
        0.08867202449292003,
        0.2983155530600786,
        0.5231718898385564,
        0.9035308953341739,
        1.091339786041773,
        1.4019991308126896,
        1.3743589743589713,
        0.19698996655518394,
        1,
        0.1657894736842105,
        0.48537275298841065,
        1.2055347091932447,
        0.5183350895679664,
        0.12610340479192939,
        0.6788586684465207,
        1.2459514170040464,
        0.36095423563778,
        0.18523430592396117,
      ],
      [
        0.3248078060319339,
        0.23684210526315785,
        0.2750320924261875,
        0.15416073968705546,
        0.1305596738324685,
        0.20047964739434782,
        0.20175438596491221,
        0.16770476487075678,
        0.19870784746296877,
        0.22335526315789472,
        0.2717811477847159,
        0.28923703142748963,
        0.24048347613219098,
        0.3209316394434363,
        0.32342788790157223,
        0.5748866396761136,
        0.21131722749496692,
        0.26767653118561513,
        0.1389602053915276,
        0.07459165154264971,
        0.22309505106048702,
        0.21683944710260503,
        0.35471869328493666,
        0.21834233018443538,
        0.24038461538461536,
        0.35551558752997603,
        0.07565789473684209,
        0.38219476147466985,
        0.4331513430880104,
        0.30736596163305446,
        0.07634061569016881,
        0.151219746446408,
        0.26911495155799947,
        0.35004802151363795,
        0.49431448992852567,
        0.11486194995685939,
        0.20473161380271873,
        0.19759143621766276,
        0.23062865497076018,
        0.29376430205949655,
        0.1657894736842105,
        1,
        0.4687129300118625,
        0.19528241335044927,
        0.28857245854361924,
        0.12478429680759275,
        0.3474711725082773,
        0.19078947368421045,
        0.14198867421718855,
        0.2778281911675742,
      ],
      [
        0.44404014554760296,
        0.2510769807079977,
        0.5030813297456819,
        0.46518226411464814,
        0.3243947671795899,
        0.5730121721040846,
        0.4607812532517531,
        0.47594179704773665,
        0.4914086417911503,
        0.5104092526690386,
        0.5684399943703873,
        0.5934441059252239,
        0.30273386852051043,
        0.6318259909191319,
        0.5990017100337383,
        0.7552367916780701,
        0.44649281449934863,
        0.5053380782918141,
        0.41467754535196605,
        0.3988710271198921,
        0.4974947327419843,
        0.36295337718825266,
        0.6230948582648178,
        0.40949600024333144,
        0.5079113057760737,
        0.5219454329774604,
        0.46003855278766304,
        0.4301774917971807,
        0.5786250449146729,
        0.5173335107149569,
        0.46491640367958087,
        0.3813024391511024,
        0.35881092756856253,
        0.5803188127213366,
        0.6775455992537854,
        0.5451840616066742,
        0.5537303700910494,
        0.4957476325471982,
        0.4832690786872275,
        0.40553922327092673,
        0.48537275298841065,
        0.4687129300118625,
        1,
        0.49513207765529615,
        0.5117892718438718,
        0.43312331058086856,
        0.6085203397637294,
        0.5022554161203723,
        0.6423562622940969,
        0.38424346545588306,
      ],
      [
        0.25596053713346134,
        0.16206675224646983,
        0.8536585365853665,
        0.8894199077125904,
        0.17554105118515978,
        1.40775561696504,
        1.3666381400656094,
        1.5798455765622765,
        1.456258215276763,
        1.4513719512195147,
        0.5893275458178312,
        0.503991928408493,
        0.14583096993760636,
        0.6326745164003372,
        0.7040703199239788,
        0.42302814258911886,
        0.16250166600026664,
        0.4838338685877961,
        0.32317073170731725,
        0.16122792262405383,
        0.33008736803785976,
        0.21686375954668644,
        0.5425147182506312,
        0.17573483427141967,
        0.3415572232645403,
        0.2925513247938237,
        0.39786585365853666,
        0.34445036338038904,
        0.4860388624633135,
        0.301800775017096,
        0.2807179015186378,
        0.04019049314580737,
        0.11682441451280187,
        0.36859533558839225,
        0.5075510156810975,
        0.954118352658937,
        1.3798659344209352,
        1.3913807358412569,
        1.3147018970189692,
        0.24178154825026513,
        1.2055347091932447,
        0.19528241335044927,
        0.49513207765529615,
        1,
        0.5270631473438026,
        0.20601759296281497,
        0.7643510925347867,
        1.552631578947367,
        0.36577647422043835,
        0.21291000841042895,
      ],
      [
        0.3146837001693089,
        0.10634462869502523,
        0.28566655529568996,
        0.30544242873009997,
        0.17431989195446654,
        0.5391389432485325,
        0.5389730032844666,
        0.5296668557996265,
        0.45697645804281806,
        0.4742294520547945,
        0.4579366922064847,
        0.4007588449788114,
        0.18865880853775086,
        0.40107857030388977,
        0.44634406689201256,
        0.5626891464699684,
        0.22988247623325106,
        0.29525179154682396,
        0.27188439692616106,
        0.1717524799244213,
        0.3317317521979146,
        0.2510031825100319,
        0.4464336324988196,
        0.2617375014635288,
        0.24720758693361433,
        0.36339147859794385,
        0.08304794520547945,
        0.3977518004829781,
        0.48149832319672636,
        0.3238381769299703,
        0.32230550529852675,
        0.14833516648335165,
        0.13194302460301235,
        0.36650334966503306,
        0.5405755245937902,
        0.4225241410285203,
        0.5646829356799414,
        0.4927637179784844,
        0.4968607305936073,
        0.40262060750446693,
        0.5183350895679664,
        0.28857245854361924,
        0.5117892718438718,
        0.5270631473438026,
        1,
        0.1792050303166405,
        0.6145217365465188,
        0.4689077144917086,
        0.29573435061557146,
        0.2652968036529681,
      ],
      [
        0.2889574507275743,
        0.20707506471095774,
        0.20791683326669336,
        0.21178555604785115,
        0.10320942045716923,
        0.2871275135266091,
        0.22351644137666574,
        0.1766417693277719,
        0.16957887503681163,
        0.1612704918032787,
        0.30068537556728725,
        0.22885953532256176,
        0.17167365611894775,
        0.3030431505558698,
        0.2440493932297212,
        0.5621538461538468,
        0.18306010928961755,
        0.25290239775975726,
        0.20011995201919236,
        0.13583945732052005,
        0.32878639588940567,
        0.10978638847491305,
        0.293273035613341,
        0.10081266638643688,
        0.20605296343001264,
        0.294649526280615,
        0.23668032786885246,
        0.3176645098590831,
        0.5583973879327938,
        0.38853991113834835,
        0.2058459635013919,
        0.1321646523872203,
        0.19757768534377299,
        0.35493598181165475,
        0.4801114691825081,
        0.23770491803278687,
        0.215991748995766,
        0.22520144484579058,
        0.1779371584699454,
        0.09515324305060584,
        0.12610340479192939,
        0.12478429680759275,
        0.43312331058086856,
        0.20601759296281497,
        0.1792050303166405,
        1,
        0.32712207958465217,
        0.1592968075927524,
        0.19516497198588925,
        0.39753156208780843,
      ],
      [
        0.4614114406882942,
        0.21024089507934693,
        0.6353103010422729,
        0.7599519258955264,
        0.3120894564785678,
        0.8043448062148032,
        0.766627342035493,
        0.8066590509440502,
        0.7922896073363039,
        0.7642353579175695,
        0.6365675208647373,
        0.6160364550008579,
        0.22165161680875758,
        0.7370035155957825,
        0.6617009888159562,
        0.6769150675788408,
        0.3607861266194899,
        0.6663372986158813,
        0.43192159145018805,
        0.2595706485152217,
        0.5765127723637774,
        0.41793203181489536,
        0.7538559353728777,
        0.3477761091643955,
        0.4751209744702159,
        0.5335653386184758,
        0.3007727765726681,
        0.5222148148398823,
        0.5581479914672226,
        0.4859356944472591,
        0.5207301600294683,
        0.1826559209588802,
        0.3183108319573499,
        0.49559668761974046,
        0.658480161010892,
        0.69958394082714,
        0.7359900015802106,
        0.7718543573905888,
        0.6978338153771984,
        0.4173347165896445,
        0.6788586684465207,
        0.3474711725082773,
        0.6085203397637294,
        0.7643510925347867,
        0.6145217365465188,
        0.32712207958465217,
        1,
        0.7826378582029907,
        0.6406134160740269,
        0.29884060139127844,
      ],
      [
        0.26382318154937906,
        0.14473684210526314,
        0.7613928112965341,
        0.8826458036984349,
        0.17939214232765013,
        1.3821947109152197,
        1.2456140350877156,
        1.4922921208346303,
        1.5942325874566616,
        1.5125,
        0.5228218852215282,
        0.3778398333964409,
        0.14326805385556915,
        0.5744857834240779,
        0.6013157894736845,
        0.47397570850202503,
        0.1587935001438021,
        0.3959074733096084,
        0.29204107830551995,
        0.13443738656987297,
        0.35909269442262404,
        0.20933014354066987,
        0.5314428312159714,
        0.22031039136302286,
        0.2678137651821862,
        0.3207749589801844,
        0.24671052631578944,
        0.3065009442482964,
        0.48151343088010473,
        0.3309149040826364,
        0.24875868917576957,
        0.06939108720706877,
        0.12709478921183553,
        0.3244717633499806,
        0.4885477582846009,
        0.823986194995686,
        1.2937434646218193,
        1.3197665774605987,
        1.297514619883038,
        0.193649885583524,
        1.2459514170040464,
        0.19078947368421045,
        0.5022554161203723,
        1.552631578947367,
        0.4689077144917086,
        0.1592968075927524,
        0.7826378582029907,
        1,
        0.3690039973351099,
        0.19761040532365398,
      ],
      [
        0.2446309202104966,
        0.06528980679546968,
        0.37681383142945357,
        0.2714676702018474,
        0.1428953467641291,
        0.45164307538816456,
        0.35121030424161653,
        0.4012433525578605,
        0.41707723792920465,
        0.37689873417721503,
        0.40695844954587684,
        0.40397049449048367,
        0.12543420665292906,
        0.4100829332169359,
        0.4060825250698668,
        0.5417604673807206,
        0.2911046551843398,
        0.32352808685075896,
        0.19272923741895656,
        0.1845918812745527,
        0.38376157188739846,
        0.13144099220048588,
        0.41178524661719756,
        0.23801795953694693,
        0.3351509250243429,
        0.356282062957229,
        0.1566455696202532,
        0.42271766820039897,
        0.44312726508745154,
        0.4112741038684485,
        0.32147122044423215,
        0.12362561212233211,
        0.1342968700799799,
        0.3451445994641039,
        0.42660511858824085,
        0.4153351317700768,
        0.2987677089445889,
        0.3939426446399198,
        0.339398734177215,
        0.14309301045679693,
        0.36095423563778,
        0.14198867421718855,
        0.6423562622940969,
        0.36577647422043835,
        0.29573435061557146,
        0.19516497198588925,
        0.6406134160740269,
        0.3690039973351099,
        1,
        0.16623017605121498,
      ],
      [
        0.33481854578328807,
        0.1453720508166969,
        0.20521446593776282,
        0.2529978254116186,
        0.21068479844584764,
        0.2561576354679801,
        0.23645896350070567,
        0.21591511936339536,
        0.17819533347098893,
        0.18908045977011506,
        0.261835184102864,
        0.24222277350533367,
        0.26639935846030427,
        0.3574712643678163,
        0.3569189431258395,
        0.657273209549072,
        0.2817787827397777,
        0.33892093099357745,
        0.30836837678721607,
        0.13103448275862067,
        0.3098387373477441,
        0.25259491466388023,
        0.26781609195402295,
        0.22316534040671976,
        0.20901856763925736,
        0.3949392210369632,
        0.2996408045977011,
        0.47735757706170334,
        0.5712691372156236,
        0.34304973681383577,
        0.21396660160485786,
        0.2614481080627567,
        0.3361468519471606,
        0.39882540481583895,
        0.498876772439991,
        0.14953834558130774,
        0.2760143107254321,
        0.22696278979154483,
        0.2334291187739465,
        0.2723638180909545,
        0.18523430592396117,
        0.2778281911675742,
        0.38424346545588306,
        0.21291000841042895,
        0.2652968036529681,
        0.39753156208780843,
        0.29884060139127844,
        0.19761040532365398,
        0.16623017605121498,
        1,
      ],
    ];
    console.log(reorder);
    // console.log(bfs_order());
    const gra = reorder.mat2graph(mat);
    const perm = reorder.spectral_order(gra);
    // const newPerm = reorder.adjacent_exchange(gra,perm[0],perm[1]);
    // console.log(newPerm);
    console.log(perm);
    let permuted_mat = reorder.permute(mat, perm);
    permuted_mat = reorder.transpose(permuted_mat);
    permuted_mat = reorder.permute(permuted_mat, perm);
    permuted_mat = reorder.transpose(permuted_mat);
    console.log(permuted_mat);
    console.log('draw');
    console.log(this.props);
    const $this = this;
    const { date } = this.props;
    const { word: titleTermArr } = this.props;
    const startDate = new Date(date.$gte);
    const endDate = new Date(date.$lt);
    const timePeriod = endDate - startDate;
    let beforeThisDate = startDate;
    const timeScale = d3.scaleTime().domain([startDate, endDate]).range([0, 100]);
    const { set: propsSet } = this.props;
    let set = JSON.parse(JSON.stringify(propsSet));
    // console.log(set);
    let link;
    let node;
    let links;
    let nodes;
    const userList = [{ id: '', count: 0, term: [] }];
    const propsUserList = [{ id: '', count: 0, term: [] }];
    const { initLinks } = this.props;

    const removeWords = ['新聞', '八卦', '幹嘛', '問卦', '爆卦'];
    const groupedWords = [];

    const someData = [];
    const pi = Math.PI;
    const LinkThreshold = 0.1;
    const pie = d3.pie()
      .value(d => d.count)
      .sort(null);
    const pieColor = d3.schemeTableau10;
    const keyPlayerThreshold = 0;
    const G = new jsnx.Graph();
    const termColor = d3.interpolateBlues;
    let selectedCluster = -1;
    let fontSizeThreshhold = 0;
    let sliderHasBeenLoaded = 0;
    const NodeHiding = 1;
    const cellData = { nodes: [], links: [] };
    let totalAuthorInfluence = 0;
    const svgwidth = parseFloat(d3.select('#graph').style('width'));
    const svgHeight = parseFloat(d3.select('#graph').style('height'));
    const authorInfluenceThreshold = 100;
    const articleInfluenceThreshold = 1;
    const topAuthorThreshold = 8;

    buildGraph();

    communityDetecting();
    const origSet = JSON.parse(JSON.stringify(set));

    const termCentrality = {
      Betweenness: {},
      EigenVector: {},
      Cluster: {},
    };

    try {
      termCentrality.Betweenness = jsnx.betweennessCentrality(G, { weight: true })._stringValues;
      termCentrality.EigenVector = jsnx.eigenvectorCentrality(G)._stringValues;
      termCentrality.Cluster = jsnx.clustering(G)._stringValues;
    } catch (error) {
      console.log(error);
      Object.keys(G.node._stringValues).map((key, index) => {
        termCentrality.Betweenness[key] = 1;
        termCentrality.EigenVector[key] = 1;
        termCentrality.Cluster[key] = 1;
        return true;
      });
    }

    const width = 900;
    const height = 900;
    let svg = d3.select('#graph');
    let heatMapSvg = d3.select('#timeLine');
    const leftSvg = d3.select('#barChart');
    const authorTable = d3.select('#authorList');
    const realWidth = svg.attr('width');
    const realHeight = svg.attr('height');
    svg.selectAll('*').remove();

    svg = svg
      .call(d3.zoom().scaleExtent([1 / 2, 8]).on('zoom', zoomed))
      .append('g');

    const color = d3.schemeTableau10.concat(d3.schemeSet1);
    const simulation = d3.forceSimulation()
      .force('link', d3.forceLink().id(d => (typeof d.id === 'number' ? d.id : d.titleTerm)))
      .force('charge', d3.forceManyBody().strength(-300))
      .force('charge', d3.forceManyBody().distanceMax(1000))
      .force('center', d3.forceCenter(svgwidth / 2, svgHeight / 2));

    const cellForceSimulation = d3.forceSimulation()
      .force('link', d3.forceLink().id((d) => {
        if (d.group === 1) return d.titleTerm;

        return d.articleId ? d.articleId : d.id;
      }))
      .force('charge', d3.forceManyBody().strength(-100))
      .force('charge', d3.forceManyBody().distanceMax(1000))
      .force('center', d3.forceCenter(0, 0));

    let conutOfClickedNode = 0;

    // Table with inline Bar chart

    const chartWidth = '100px';

    // Setup the scale for the values for display, use abs max as max value
    const x = d3.scaleLinear()
      .domain([0, d3.max(set.nodes, d => d.children.length)])
      .range(['0%', '100%']);

    // const buttonDiv = d3.select(this.myRef.current).select('#button');
    const buttonDiv = d3.select('#button')
      .attr('width', 'auto')
      .style('background', 'white')
      .text('Centrality: ');
    buttonDiv.selectAll('*').remove()
      .append('form');
    // console.log(buttonDiv);
    const betweennessButton = buttonDiv.append('label')
      .text('betweenness')
      .append('input')
      .text('betweenness')
      .attr('type', 'radio')
      .attr('name', 'centrality')
      .attr('value', 'betweenness')
      .on('click', () => {
        update();
      });
    const eigenvectorButton = buttonDiv.append('label')
      .text('eigenvector')
      .append('input')
      .attr('type', 'radio')
      .attr('name', 'centrality')
      .attr('value', 'eigenvector')
      .property('checked', true)
      .on('click', () => {
        console.log(this.value);
        update(this.value);
      });
    d3.select('#betweenness').on('input', update());

    const navigator = d3.select('#button');
    // navigator.append('text')
    //   .attr('text-anchor', 'middle')
    //   .attr('font-size', '24px')
    //   .attr('x', '50%')
    //   .attr('y', '10%')
    //   .text(`${'Centrality:'} ${'    '}`);
    // navigator.append('span')
    //   .attr('font-size', '24px')
    //   .attr('margin', '5px')
    //   .text('Low');

    const slider = navigator.append('input');
    slider.datum({})
      .attr('type', 'range')
      .attr('class', 'custom-range')
      .attr('id', 'customRange1')
      .style('width', '150px')
      .style('padding-top', '15px')
      .attr('value', fontSizeThreshhold)
      .attr('min', 0)
      .attr('max', 100)
      .attr('step', 1)
      .on('input', () => {
        sliderHasBeenLoaded = 1;
        update();
      });

    // navigator.append('text')
    //   .attr('id', 'sizeThreshold')
    //   .attr('text-anchor', 'middle')
    //   .attr('font-size', '24px')
    //   .attr('x', '50%')
    //   .attr('y', '10%')
    //   .text('High');

    const cellNavigator = d3.select('#timeSlider');
    cellNavigator.append('text')
      .attr('text-anchor', 'middle')
      .attr('font-size', '24px')
      .attr('x', '50%')
      .attr('y', '10%')
      .text(`${'Date:'} ${'    '}`);
    cellNavigator.append('span')
      .attr('font-size', '24px')
      .attr('margin', '5px')
      .text('Earliest');

    const timeSlider = cellNavigator.append('input');
    timeSlider.datum({})
      .attr('type', 'range')
      .attr('class', 'custom-range')
      .attr('id', 'customRange2')
      .style('width', '150px')
      .style('padding-top', '15px')
      .attr('value', beforeThisDate)
      .attr('min', startDate)
      .attr('max', endDate)
      .attr('step', 1)
      .on('input', () => {
        sliderHasBeenLoaded = 1;
        if (sliderHasBeenLoaded) {
          beforeThisDate = d3.select('#customRange2').property('value');
          beforeThisDate = timeScale.invert(beforeThisDate);
        }
        OpinionLeader(cellData.nodes, cellData.links,
          beforeThisDate, cellForceSimulation, totalAuthorInfluence);
      });

    cellNavigator.append('text')
      .attr('id', 'sizeThreshold')
      .attr('text-anchor', 'middle')
      .attr('font-size', '24px')
      .attr('x', '50%')
      .attr('y', '10%')
      .text('Latest');
    // update();

    function update() {
      if (sliderHasBeenLoaded) {
        fontSizeThreshhold = d3.select('#customRange1').property('value');
        beforeThisDate = d3.select('#customRange2').property('value');
        beforeThisDate = timeScale.invert(beforeThisDate);
        // nevigator.select('#sizeThreshold').text(fontSizeThreshhold);
      }
      // console.log(beforeThisDate);
      // console.log('svgupdate');
      // console.log(initLinks);
      const selectedCentrality = d3.select('input[name="centrality"]:checked').property('value');
      // console.log(selectedCentrality);
      const termCentralityArr = {
        betweennessArr: Object.values(termCentrality.Betweenness),
        eigenvectorArr: Object.values(termCentrality.EigenVector),
        clusterArr: Object.values(termCentrality.Cluster),
      };

      const normalizeBetweenness = d3.scaleLinear()
        .domain([
          Math.min(...termCentralityArr.betweennessArr),
          Math.max(...termCentralityArr.betweennessArr),
        ]).range([5, 50]);

      const normalizeEigenvector = d3.scaleLinear()
        .domain([
          Math.min(...termCentralityArr.eigenvectorArr),
          Math.max(...termCentralityArr.eigenvectorArr),
        ]).range([5, 50]);
      const normalizeCluster = d3.scaleLinear()
        .domain([
          Math.min(...termCentralityArr.clusterArr),
          Math.max(...termCentralityArr.clusterArr),
        ]).range([0.2, 0.8]);

      // console.log(set);
      ({ nodes, links } = set);
      svg.selectAll('g').remove();

      link = svg.selectAll('line')
        .data(set.links);

      link.exit().remove();
      const linkEnter = link.enter()
        // .append('g')
        .append('line')
        .attr('class', 'links')
        .style('z-index', -1)
        .attr('visibility', 'hidden')
        .attr('stroke', d => d.color)
        .attr('stroke-width', d => (d.value < 100000 ? d.value : 3));
      link = linkEnter.merge(link);
      // console.log(realWidth, realHeight);
      const voronoi = d3.voronoi().extent([[-1000, -1000], [4000, 2000]]);

      const polygons = svg.append('g')
        .attr('class', 'polygons')
        .selectAll('polygon')
        .data(set.nodes)
        .enter()
        .append('polygon')
        .style('fill', (d) => {
          if (d.group === 1) {
            const cluster = d.cluster % 19;
            const betweennessColor = d3.hsl(color[cluster]);
            return betweennessColor;
          }
          return 'green';
        })
        .style('fill-opacity', 0.3)
        .style('stroke', 'white')
        .style('stroke-width', '0');

      // svg.selectAll('g').remove();
      node = svg.append('g')
        .attr('class', 'nodes')
        .selectAll('g')
        .data(set.nodes);
      // node.exit().remove();
      // let node = svg.selectAll('g').data(set.nodes)
      const nodeEnter = node.enter()
        .append('g')
        .attr('class', 'nodes')
        .style('z-index', 1)
        .attr('opacity', (d) => {
          if (d.group !== 2 && d.connected === 0) return 0.2;
          if (d.show === 0) return 0.2;
          return 1;
        })
        .on('click', clicked)
        .on('mouseover', mouseOver(0.1))
        .on('mouseout', mouseOut)
        .call(d3.drag()
          .on('start', dragstarted)
          .on('drag', dragged)
          .on('end', dragended));

      nodeEnter
        .append('defs')
        .append('pattern')
        .attr('id', 'pic_user')
        .attr('height', 60)
        .attr('width', 60)
        .attr('x', 0)
        .attr('y', 0)
        .append('image')
        .attr('xlink:href', 'https://i.imgur.com/jTUiJ1l.png')
        .attr('height', 10)
        .attr('width', 10)
        .attr('x', 0)
        .attr('y', 0);

      nodeEnter.append('path')
        .attr('id', d => d.titleTerm)
        .attr('d', (d) => {
          if (d.group === 1) {
            const circle_radius = centrality(selectedCentrality, termCentrality.EigenVector[d.titleTerm]) / 2;
            const erliestTime = new Date(d.date[0]);
            const latestTime = new Date(d.date[d.date.length - 1]);
            const arc = d3.arc()
              .innerRadius(circle_radius + 2)
              .outerRadius(circle_radius + 3)
              .startAngle(((erliestTime - startDate) / timePeriod) * 360 * (pi / 180))
              .endAngle(((latestTime - startDate) / timePeriod) * 360 * (pi / 180));
            return arc();
          }
          // return 'M0';
        })
        .attr('fill', 'darkgray');

      const timeline = nodeEnter.selectAll('circle');
      // console.log(timeline);

      timeline.data(d => (d.group === 1 ? d.date : d))
        .enter()
        .append('g')
        // .selectAll('line')
        .append('line')
        .attr('transform', (d) => {
          const erliestTime = new Date(d);
          const rotate = `rotate(${((erliestTime - startDate) / timePeriod) * 360})`;
          return rotate;
        })
        .attr('x1', 0)
        .attr('y1', function setY_2(d) {
          let term = d3.select(this.parentNode.parentNode);
          term = term.select('path').attr('id');
          return -centrality(selectedCentrality, { titleTerm: term }) / 2;
        })
        .attr('x2', 0)
        .attr('y2', function setY_2(d) {
          let term = d3.select(this.parentNode.parentNode);
          term = term.select('path').attr('id');
          return (-centrality(selectedCentrality, { titleTerm: term }) / 2 - 5);
        })
        // .attr('opacity', () => (NodeHiding ? 0 : 1))
        .attr('opacity', 0)
        .style('stroke', 'green')
        .style('stroke-width', '1px');

      const keyPlayerCircles = nodeEnter.selectAll('circle');
      const circles = nodeEnter.append('circle')
        .transition()
        .duration(500)
        .attr('r', d => (d.group === 1 ? centrality(selectedCentrality, d) / 2 : d.size / 2))
        .attr('fill', (d) => {
          if (d.group === 1) {
            const cluster = d.cluster % 19;
            const betweennessColor = d3.hsl(color[cluster]);
            return betweennessColor;
          }
          if (d.group === 2) {
            return 'green';
          }
          return 'url(#pic_user)';
        })
        .style('fill-opacity', () => (NodeHiding ? 0 : 1))
        // .style('fill-opacity', 1)
        .attr('stroke', (d) => {
          if (d.group !== 2) {
            if (d.tag === 1) return 'red'; // d.group !== 2 && d.tag === 1
            const cluster = d.cluster % 19;
            let strokeColor = d3.color(color[cluster]);
            strokeColor = strokeColor.darker();
            return strokeColor; // d.group !== 2 && d.tag !== 1
          }
          return 'gray'; // d.group === 2
        })
        .attr('stroke-width', d => (d.group === 1 ? 2 : 0.9))
        .attr('stroke-opacity', () => (NodeHiding ? 0 : 1));

      const pieGroup = nodeEnter.append('g');
      const path = pieGroup.selectAll('path')
        .data((d) => {
          if (d.group === 3) {
            // const totalMessageCount = d.data.reduce((pre, next) => pre.count + next.count);
            console.log(d.message_count);
            return pie(d.message_count);
          }
          return [];
        });

      path.enter().append('path')
        .attr('fill', (d) => {
          switch (d.data.type) {
            case 'push':
              return pieColor[4];
            case 'boo':
              return pieColor[2];
            case 'neutral':
              return pieColor[5];
            default:
              break;
          }
          return 'gray';
        })
        .attr('d', (d) => {
          // console.log(d);
          const arc = d3.arc()
            .innerRadius(0)
            .outerRadius(5 + Math.sqrt(d.data.radius))
            .startAngle(d.startAngle)
            .endAngle(d.endAngle);
          return arc();
        })
        .attr('stroke', 'white')
        .attr('stroke-width', '0.2px');


      const lables = nodeEnter.append('text')
        .text((d) => {
          if (d.group === 2) return '';
          return d.titleTerm;
        })
        .style('text-anchor', 'middle')
        .attr('font-family', 'Microsoft JhengHei')
        .attr('font-size', (d) => {
          if (centrality(selectedCentrality, d) <= fontSizeThreshhold) {
            return '0px';
          }
          return `${5 + centrality(selectedCentrality, d)}px`;
        })
        .attr('fill', 'rgb(0,0,0)')
        .attr('y', (d) => {
          if (NodeHiding) return 0;
          return d.group !== 1 ? 3 : centrality(selectedCentrality, d) * 2 + 5;
        });
        // .style('stroke', (d) => {
        //   if (d.group === 1) {
        //     const cluster = d.cluster % 19;
        //     const betweennessColor = d3.hsl(color[cluster]);
        //     return betweennessColor;
        //   }
        // });
        // style="fill: none; stroke: rgb(0, 0, 0); font-size: 48px; visibility: visible;"
      nodeEnter.append('title')
        .text(d => d.titleTerm);
      node = nodeEnter.merge(node);

      const strengthScale = d3.scaleLinear()
        .domain([
          Math.min(...set.links.map(l => l.value)),
          Math.max(...set.links.map(l => l.value)),
        ]).range([1, 100]);


      const simulationDurationInMs = 20000; // 20 seconds

      const startTime = Date.now();
      const endTime = startTime + simulationDurationInMs;

      function onSimulationTick() {
        if (Date.now() < endTime) {
          ticked();
        } else {
          simulation.stop();
        }
      }

      simulation
        .nodes(set.nodes)
        .on('tick', onSimulationTick);

      simulation.alphaDecay(0.005)
        .force('link')
        .links(set.links)
        .distance(d => 100 / strengthScale(d.value));
      // .strength((d) => {
      //   console.log(strengthScale(d.value));
      //   return strengthScale(d.value);
      // });

      simulation.force('collision', d3.forceCollide(d => (d.group === 1 ? centrality(selectedCentrality, d) * 2 + 2 : d.size / 2 + 2)));
      // .distance(d => 300 / d.value);
      // .strength(1);

      leftSvg.selectAll('*').remove();

      // drawTable(term_community);
      // drawTimeLine();
      drawHeatMap();
      // drawWordTree();

      function drawTable(data) {
        const table = leftSvg.append('foreignObject')
          .attr('width', '100%')
          .attr('height', '100%')
          .style('overflow-y', 'scroll')
          .append('xhtml:table');
        const th = table.append('tr');

        th.append('td').attr('class', 'data name')
          .attr('width', '25%')
          .text('Cluster');

        // Create a table with rows and bind a data row to each table row
        const tr = table.selectAll('tr.data')
          .data(data)
          .enter()
          .append('tr')
          .attr('class', 'datarow')
          .style('border', d => (d.tag === 1 ? '2px black solid' : 'none'))
          .on('mouseover', mouseOver(0.1))
          .on('mouseout', mouseOut)
          .on('click', clusterClicked);

        // Set the even columns
        d3.selectAll('.datarow').filter(':nth-child(even)')
          .style('background', 'whitesmoke');

        // Create a column at the beginning of the table for the chart
        const chart = tr.append('td').attr('class', 'chart')
          .attr('width', '10px')
          .attr('padding-bottom', '2px')
          .attr('padding-top', '2px');

        // Create the div structure of the chart
        chart.append('div')
          .style('height', '17px')
          .attr('class', 'chart')
          .style('float', 'left')
          .style('width', '50%')
          .append('div')
          .style('height', '17px')
          .attr('class', 'positive');

        // Creates the positive div bar
        tr.select('div.positive')
          .style('width', '17px')
          .style('background-color', (d) => {
            const cluster = d.cluster % 19;
            const betweennessColor = d3.hsl(color[cluster]);
            return betweennessColor;
          });
      }

      function drawHeatMap() {
        // Labels of row and columns
        const domainName = [];
        set.nodes.forEach((term) => {
          domainName.push(term.titleTerm);
        });

        const postDate = [];
        const currentDate = new Date(startDate.toDateString());
        while (currentDate <= endDate) {
          postDate.push(new Date(currentDate));
          currentDate.setDate(currentDate.getDate() + 1);
        }
        // console.log(postDate);

        // set the dimensions and margins of the graph
        // console.log(heatMapSvg);
        heatMapSvg.selectAll('*').remove();
        heatMapSvg = heatMapSvg
          .call(d3.zoom().scaleExtent([1 / 2, 8]).on('zoom', heatMapZoomed))
          .append('g');
        const margin = {
          top: 30, right: 30, bottom: 30, left: 30,
        };
        const heatMapWidth = postDate.length * 30;
        const heatMapHeight = domainName.length * 30;

        // append the svg object to the body of the page
        const heatMap = heatMapSvg.attr('height', heatMapHeight + margin.top + margin.bottom)
          .append('g')
          .attr('transform', `translate(${200}, ${margin.top})`);

        // Build X scales and axis:
        const heatMapX = d3.scaleBand()
          .range([0, heatMapWidth])
          .domain(postDate)
          .padding(0.1);
        heatMap.append('g')
          .call(d3.drag()
            .on('start', dragstarted)
            .on('drag', dragged)
            .on('end', dragended))
          .call(d3.axisTop(heatMapX).tickFormat(d3.timeFormat('%m/%d')));

        // Build X scales and axis:
        const heatMapY = d3.scaleBand()
          .range([0, heatMapHeight])
          .domain(domainName)
          .padding(0.1);
        heatMap.append('g')
          .attr('class', 'axisY')
          .call(d3.axisLeft(heatMapY));

        const myColor = d3.interpolateRdYlGn;

        set.nodes.forEach((obj) => {
          const numOfPostAtDate = {};
          postDate.forEach((ele) => {
            numOfPostAtDate[ele] = 0;
          });
          if (obj.date) {
            obj.date.forEach((ele) => {
              let postdate = new Date(ele);
              postdate = new Date(postdate.toDateString());
              numOfPostAtDate[postdate] += 1;
            });
            // console.log(numOfPostAtDate);
            heatMap.selectAll()
              .data(obj.date).enter()
              .append('rect')
              .attr('x', (d) => {
                const post_Date = new Date(d);
                return heatMapX(new Date(post_Date.toDateString()));
              })
              .attr('y', heatMapY(obj.titleTerm))
              .attr('width', heatMapX.bandwidth())
              .attr('height', heatMapY.bandwidth())
              .style('fill', (d) => {
                let postdate = new Date(d);
                postdate = new Date(postdate.toDateString());
                const percentage = numOfPostAtDate[postdate] / 100;
                return myColor(0.5 - (percentage / 2));
              });
          }
        });

        heatMap.select('.axisY')
          .attr('font-size', '15px');
        heatMap.selectAll('.axisY .tick')
          .on('click', clicked);
      }

      function ticked() {
        if (set.nodes[0].x) {
          const polygonShapes = voronoi(set.nodes.map(d => [d.x, d.y])).polygons();
          polygons.attr('points', (d, i) => polygonShapes[i]);
        }

        link
          .attr('x1', d => d.source.x)
          .attr('y1', d => d.source.y)
          .attr('x2', d => d.target.x)
          .attr('y2', d => d.target.y);
        node
          .attr('transform', d => `translate( ${d.x}, ${d.y})`);
      }

      function clusterClicked(d) {
        console.log(`cluster: ${d.cluster} clicked!`);
        if (selectedCluster === d.cluster) {
          set.nodes.forEach((_node) => { _node.show = 1; });
        } else {
          set.nodes.forEach((_node) => {
            _node.show = _node.cluster === d.cluster ? 1 : 0;
          });
        }
        selectedCluster = d.cluster;
        update();
      }
      function clicked(d) {
        console.log('clicked');
        const opWord = d.titleTerm.split(' ')[0];
        $this.setState({
          optionsWord: opWord,
          word: [['clicked']],
          draw: 0,
        });
        if (d3.event.defaultPrevented) return; // dragged
        if (typeof d === 'string') {
          d = set.nodes.find(ele => ele.titleTerm === d);
        }
        // AuthorTable(d, authorTable, (n) => {
        //   console.log(n);
        // });
        // console.log(d);
        set.nodes.forEach((_node) => {
          if (isConnected(d, _node)) {
            _node.connected = _node.connected <= 0 ? 1 : _node.connected += 1;
          } else if (_node.connected === -1) {
            _node.connected = 0;
          }
        });

        if (d.tag === 0) {
          d.tag = 1;
          conutOfClickedNode += 1;

          AuthorTable(d, authorTable, (n, index) => {
            const clickedNode = JSON.parse(JSON.stringify(n));
            cellData.nodes = [];
            cellData.links = [];
            clickedNode.fx = 0;
            clickedNode.fy = 0;
            cellData.nodes.push(clickedNode);
            totalAuthorInfluence = 0;

            // compute author's influence
            clickedNode.children.forEach((author) => {
              let influence = 0;
              author.responder.forEach((article) => {
                if (article.message.length >= articleInfluenceThreshold) {
                  influence += article.message.length;
                }
              });
              author.influence = influence;
            });
            clickedNode.children.sort((a, b) => ((a.influence < b.influence) ? 1 : -1));
            // compute cellnodes and celllinks
            let topInfluenceAuthor = 1;
            const topNumOfPushes = 100;

            // testing data structure
            let authorGroup = index;
            clickedNode.children.every((author) => {
              let size = 0;
              let countedArticle = 0;
              if (topInfluenceAuthor <= topAuthorThreshold) {
                author.responder.forEach((article) => {
                  let replyCount = 0;
                  if (article.message.length >= articleInfluenceThreshold) {
                    cellData.nodes.push(article);
                    cellData.links.push({
                      source: article.articleId,
                      target: author.id,
                      tag: 0,
                      value: 1,
                    });
                    console.log(cellData);
                    article.message.every((mes) => {
                      let cuttedPushContent = '';
                      mes.cutted_push_content.forEach((w) => {
                        cuttedPushContent = cuttedPushContent.concat(' ', w);
                      });
                      if (replyCount < topNumOfPushes) {
                        // if (mes.push_tag === '推') {
                        if (mes.push_tag) {
                          if (cellData.nodes.some(data => data.id === mes.push_userid)) {
                            // already has same replyer
                            const replyer = cellData.nodes.find(data => data.id === mes.push_userid);
                            // console.log(mes.push_userid, replyer);
                            replyer.push_content.push({ id: mes.push_userid, content: mes.push_content });
                            // console.log(replyer);
                            replyer.adj[mes.push_userid] += 1;
                            if (!replyer.push_detail) {
                              replyer.push_detail = [];
                            }
                            replyer.push_detail.push({
                              author,
                              article: [{
                                title: article,
                                messageCount: {
                                  push: mes.push_tag === '推' ? 1 : 0, boo: mes.push_tag === '噓' ? 1 : 0,
                                },
                                messageContent: mes.push_content,
                                pushDate: mes.push_ipdatetime,
                              }],
                            });
                            // console.log(replyer);
                            if (replyer.cutted_push_content) replyer.cutted_push_content.push([cuttedPushContent]);
                            else replyer.cutted_push_content = [cuttedPushContent];
                            replyer.authorGroup = replyer.authorGroup ? replyer.authorGroup : [];
                            if (!replyer.authorGroup.some(e => e === author.id)) replyer.authorGroup.push(author.id);
                            replyer.reply = replyer.reply ? replyer.reply : [];
                            if (replyer.reply.some(e => e.author.id === author.id)) {
                              // reply same author
                              // console.log(replyer, author);
                              const repliedAuthor = replyer.reply.find(e => e.author === author);
                              const repliedArticle = repliedAuthor.article.find(e => e.title === article);
                              if (repliedArticle) {
                                // reply same article
                                // cellData.links.find(e => e.target === article.articleId
                                // && e.source === mes.push_userid).value += 1;
                                const type = (mes.push_tag === '推') ? 'push' : 'boo';
                                repliedArticle.messageCount[type] += 1;
                              } else {
                                // reply different article
                                replyer.pushCount += 1;
                                repliedAuthor.article.push({
                                  title: article,
                                  messageCount: {
                                    push: mes.push_tag === '推' ? 1 : 0, boo: mes.push_tag === '噓' ? 1 : 0,
                                  },
                                });
                                // cellData.links.push({
                                //   source: mes.push_userid,
                                //   target: article.articleId, color: '#ffbb78', tag: 1, value: 1,
                                // });
                              }
                            } else {
                              replyer.reply.push({
                                author,
                                article: [{
                                  title: article,
                                  messageCount: {
                                    push: mes.push_tag === '推' ? 1 : 0, boo: mes.push_tag === '噓' ? 1 : 0,
                                  },
                                  push_content: mes.push_content,
                                }],
                              });
                              // replyer.push_detail.push({
                              //   author,
                              //   article: [{
                              //     title: article,
                              //     messageCount: {
                              //       push: mes.push_tag === '推' ? 1 : 0,
                              //       boo: mes.push_tag === '噓' ? 1 : 0,
                              //     },
                              //     messageContent: mes.push_content,
                              //     pushDate: mes.push_ipdatetime,
                              //   }],
                              // });
                              // cellData.links.push({
                              //   source: mes.push_userid,
                              //   target: article.articleId,
                              //   color: '#ffbb78',
                              //   tag: 1,
                              //   value: 1,
                              // });
                            }
                          } else {
                            cellData.nodes.push({
                              id: mes.push_userid,
                              containUsers: [mes.push_userid],
                              pushCount: 1,
                              push_content: [{ id: mes.push_userid, content: mes.push_content }],
                              push_ipdatetime: mes.push_ipdatetime,
                              authorGroup: [author.id],
                              adj: {
                                [mes.push_userid]: 1,
                              },
                              reply: [{
                                author,
                                article: [{
                                  title: article,
                                  messageCount: {
                                    push: mes.push_tag === '推' ? 1 : 0, boo: mes.push_tag === '噓' ? 1 : 0,
                                  },
                                }],
                              }],
                              push_detail: [{
                                author,
                                article: [{
                                  title: article,
                                  messageCount: {
                                    push: mes.push_tag === '推' ? 1 : 0, boo: mes.push_tag === '噓' ? 1 : 0,
                                  },
                                  messageContent: mes.push_content,
                                  pushDate: mes.push_ipdatetime,
                                }],
                              }],
                              cutted_push_content: [[cuttedPushContent]],
                            });

                            // cellData.links.push({
                            //   source: mes.push_userid,
                            //   target: article.articleId,
                            //   color: '#ffbb78',
                            //   tag: 1,
                            //   value: 1,
                            // });
                          }
                          replyCount += 1;
                        }
                        return true;
                      }
                      return false;
                    });
                    size += article.message.length;
                    countedArticle += 1;
                  }
                });
                author.size = size;
                totalAuthorInfluence += size;
                // console.log(author);
                if (size >= authorInfluenceThreshold) {
                  author.countedArticle = countedArticle;
                  author.adj = {};
                  author.adj[author.id] = -1;
                  cellData.nodes.push(author);
                }
                topInfluenceAuthor += 1;
                return true;
              }
              authorGroup += 1;
              return false;
            });

            // node links other nodes which comments the same article
            // nodeLinksOtherNodesWithSameArticle(clickedNode, topInfluenceAuthor, topNumOfPushes);

            // node links the author
            // nodeLinksToAuthor(clickedNode, topInfluenceAuthor, topNumOfPushes);
            nodeLinksToArticle(clickedNode, topInfluenceAuthor, topNumOfPushes);
            mergeCellDataNodes(cellData);

            cellData.nodes.sort((a, b) => ((a.size < b.size) ? 1 : -1));
            const userState = $this.state.user;
            if (!$this.state.user.includes(index)) {
              userState.push(index);
            }
            const setStateWord = cellData.nodes.find(e => e.id === index).titleTermArr;
            // console.log(userState);
            $this.setState({
              word: setStateWord,
              draw: 0,
              cellData,
              beforeThisDate,
              cellForceSimulation,
              totalAuthorInfluence,
              user: userState,
              hover: 0,
              mouseOverUser: index,
            });
            console.log($this.state);
          });
          update();
        } else {
          set = JSON.parse(JSON.stringify(origSet));
          // node.style('fill-opacity', function(o) {
          //   return 1;
          // });

          if (d.group === 1) {
            //
          } else {
            let uniquePostID = 0;
            d.responder.forEach((article) => {
              set.nodes.push({
                titleTerm: article.title,
                parentNode: d.titleTerm,
                count: article.message.length,
                message_count: article.message_count,
                group: 3,
                tag: 1,
                connected: 1,
                x: d.x,
                y: d.y,
                size: 5 + Math.sqrt(article.message_count.all),
                id: uniquePostID,
              });
              set.links.push({
                source: uniquePostID,
                target: d,
                color: '#ffbb78',
                tag: 1,
                value: 100000,
              });
              console.log(set.links);
              uniquePostID += 1;
            });
          }
          set.nodes = set.nodes.filter(() => true);
          set.links = set.links.filter(() => true);
          conutOfClickedNode -= 1;

          if (conutOfClickedNode === 0) set.nodes.forEach((_node) => { _node.connected = -1; });
          // mouseOut();
          d.tag = 0;
        }
        console.log('done!');
        update();
      }

      function mergeCellDataNodes(data) {
        data.links = data.links.filter(e => e.source !== e.target);
        for (let i = 0; i < data.links.length; i += 1) {
          const t = data.links[i].target; // target id
          const s = data.links[i].source; // source id
          const target_node = data.nodes.find(e => e.id === t); // find target node
          const source_node = data.nodes.find(e => e.id === s); // find source node

          // adjacency matrix
          // target_node.adj[s] = target_node.adj[s]
          //   ? target_node.adj[s] + data.links[i].value : data.links[i].value;
          // source_node.adj[t] = source_node.adj[t]
          //   ? source_node.adj[t] + data.links[i].value : data.links[i].value;
        }

        // merge nodes by author & article
        for (let i = 0; i < data.nodes.length - 1; i += 1) {
          for (let j = i + 1; j < data.nodes.length; j += 1) {
            if (!data.nodes[i].responder && data.nodes[i].id) {
              if (_.isEqual(data.nodes[i].reply, data.nodes[j].reply)) {
                const temp_id = data.nodes[i].id;
                const next_id = data.nodes[j].id;
                data.nodes[i].containUsers.push(data.nodes[j].id);
                data.nodes[j].cutted_push_content.forEach((c) => {
                  data.nodes[i].cutted_push_content.push(c);
                });
                data.nodes[j].push_detail.forEach((c) => {
                  data.nodes[i].push_detail.push(c);
                });
                data.nodes[j].push_content.forEach((c) => {
                  data.nodes[i].push_content.push(c);
                });
                data.nodes[i].id = data.nodes[i].id.concat(' ', data.nodes[j].id);

                data.links.forEach((l) => {
                  if (l.source === temp_id) l.source = data.nodes[i].id;
                  if (l.source === next_id) l.source = data.nodes[i].id;
                  if (l.target === temp_id) l.target = data.nodes[i].id;
                  if (l.target === next_id) l.target = data.nodes[i].id;
                });
                data.links = data.links.filter(e => e.source !== e.target);
                data.nodes = data.nodes.filter(e => e.id !== data.nodes[j].id);
                j -= 1;
              }
            }
          }
        }


        // // merge links
        for (let i = 0; i < data.links.length - 1; i += 1) {
          const l = data.links[i];
          for (let j = i + 1; j < data.links.length; j += 1) {
            const temp = data.links[j];
            if ((temp.source === l.source && temp.target === l.target)
            || (temp.source === l.target && temp.target === l.source)) {
              // l.value += data.links[j].value;
              data.links.splice(j, 1);
              j -= 1;
            }
          }
          // data.links = data.links.filter((e) => {
          //   if (e.value > 1) return true;
          //   return e.source !== l.source && e.target !== l.target;
          // });
        }
        const count = 0;
        for (let i = 0; i < data.links.length - 1; i += 1) {
          if (data.links[i].source === data.links[i].target) console.log(data.links[i]);
        }
        // console.log(count);
        console.log(data);
      }

      function nodeLinksOtherNodesWithSameArticle(termNode,
        thresholdOfInfluence, topNumOfComments) {
        termNode.children.every((author) => {
          if (thresholdOfInfluence <= topAuthorThreshold) {
            author.responder.forEach((article) => {
              let replyCount = 0;
              // const filteredMessages = article.message.filter(e => e.push_tag === '推');
              const filteredMessages = article.message.filter(e => e.push_tag);
              // console.log(filteredMessages);
              const maximumLength = Math.min(topNumOfComments, filteredMessages.length);
              if (article.message.length >= articleInfluenceThreshold) {
                for (let i = 0; i < maximumLength - 1; i += 1) {
                  for (let j = i + 1; j < maximumLength; j += 1) {
                    const existedLink = cellData.links.find((l) => {
                      const temp_id = filteredMessages[i].push_userid;
                      const next_id = filteredMessages[j].push_userid;

                      return (l.source === temp_id && l.target === next_id)
                              || (l.source === next_id && l.target === temp_id);
                    });

                    if (existedLink) existedLink.value += 1;
                    else {
                      cellData.links.push({
                        source: filteredMessages[i].push_userid,
                        target: filteredMessages[j].push_userid,
                        color: '#ffbb78',
                        tag: 1,
                        value: 1,
                      });
                    }
                    replyCount += 1;
                  }
                }
              }
            });
            thresholdOfInfluence += 1;
            return true;
          }
          return false;
        });
      }

      function nodeLinksToAuthor(termNode, thresholdOfInfluence, topNumOfComments) {
        termNode.children.every((author) => {
          if (thresholdOfInfluence <= topAuthorThreshold) {
            author.responder.forEach((article) => {
              // const filteredMessages = article.message.filter(e => e.push_tag === '推');
              const filteredMessages = article.message.filter(e => e.push_tag);
              // console.log(filteredMessages);
              const maximumLength = Math.min(topNumOfComments, filteredMessages.length);
              if (article.message.length >= articleInfluenceThreshold) {
                for (let i = 0; i < maximumLength; i += 1) {
                  // console.log(filteredMessages[i]);
                  const existedLink = cellData.links.find((l) => {
                    const user_id = filteredMessages[i].push_userid;
                    const author_id = author.id;
                    return l.source === user_id && l.target === author.id;
                  });
                  if (existedLink) {
                    existedLink.value += 1;
                  } else {
                    cellData.links.push({
                      source: filteredMessages[i].push_userid,
                      target: author.id,
                      color: '#ffbb78',
                      tag: 0,
                      value: 1,
                    });
                  }
                }
              }
            });
            thresholdOfInfluence += 1;
            return true;
          }
          return false;
        });
      }

      function nodeLinksToArticle(termNode, thresholdOfInfluence, topNumOfComments) {
        termNode.children.every((author) => {
          if (thresholdOfInfluence <= topAuthorThreshold) {
            author.responder.forEach((article) => {
              // const filteredMessages = article.message.filter(e => e.push_tag === '推');
              const filteredMessages = article.message.filter(e => e.push_tag);
              // console.log(filteredMessages);
              const maximumLength = Math.min(topNumOfComments, filteredMessages.length);
              if (article.message.length >= articleInfluenceThreshold) {
                for (let i = 0; i < maximumLength; i += 1) {
                  // console.log(filteredMessages[i]);
                  const existedLink = cellData.links.find((l) => {
                    const user_id = filteredMessages[i].push_userid;
                    const author_id = author.id;
                    return l.source === user_id && l.target === author.id;
                  });
                  if (existedLink) {
                    existedLink.value += 1;
                  } else {
                    // cellData.links.push({
                    //   source: filteredMessages[i].push_userid,
                    //   target: author.id,
                    //   color: '#ffbb78',
                    //   tag: 0,
                    //   value: 1,
                    // });
                    cellData.links.push({
                      source: filteredMessages[i].push_userid,
                      target: article.articleId,
                      color: '#ffbb78',
                      tag: 1,
                      value: 1,
                    });
                  }
                }
              }
            });
            thresholdOfInfluence += 1;
            return true;
          }
          return false;
        });
      }

      function adjIsEquivalent(a, b) {
        const aAdj = a.adj;
        const bAdj = b.adj;
        if (!aAdj || !bAdj) return false;
        // Create arrays of property names
        console.log(a.id, b.id);
        const aProps = Object.getOwnPropertyNames(aAdj);
        const bProps = Object.getOwnPropertyNames(bAdj);

        // If number of properties is different,
        // objects are not equivalent
        if (aProps.length !== bProps.length) {
          return false;
        }

        for (let i = 0; i < aProps.length; i += 1) {
          const propName = aProps[i];
          if (aProps[i] !== a.id && aProps[i] !== b.id) {
            console.log(aProps[i]);
            // If values of same property are not equal,
            // objects are not equivalent
            if (aAdj[propName] !== bAdj[propName]) {
              return false;
            }
          }
        }

        // If we made it this far, objects
        // are considered equivalent
        return true;
      }

      function mouseOut() {
        node.style('stroke-opacity', 1);
        node.style('fill-opacity', 1);
        node.selectAll('text').style('visibility', d => (d.group === 2 ? 'visible' : 'visible'));
        // node.selectAll('circle').style('fill', d => (d.group === 2 ? '#ff7f0e' : '1f77b4'));
        link.style('stroke-opacity', 1);
        // link.style('stroke', '#ddd');
      }

      function centrality(option, d) {
        if (option === 'eigenvector') return normalizeEigenvector(termCentrality.EigenVector[d.titleTerm]);
        return normalizeBetweenness(termCentrality.Betweenness[d.titleTerm]);
      }
    }

    // build a dictionary of nodes that are linked
    const linkedByIndex = {};
    initLinks.forEach((d) => {
      linkedByIndex[`${d.source.index},${d.target.index}`] = 1;
    });
    // check the dictionary to see if nodes are linked
    function isConnected(a, b) {
      return linkedByIndex[`${a.index},${b.index}`] || linkedByIndex[`${b.index},${a.index}`] || a.index === b.index;
    }

    // fade nodes on hover
    function mouseOver(opacity) {
      return (d) => {
        node.selectAll('text').style('visibility', 'visible');
        // also style link accordingly
        link.style('stroke-opacity', o => (o.source === d || o.target === d ? 1 : opacity));
        // link.style('stroke', o => (o.source === d || o.target === d ? '#2E2E2E' : '#ddd'));
      };
    }

    function dragstarted(d) {
      if (!d3.event.active) {
        simulation.alphaTarget(0.3).restart();
        cellForceSimulation.alphaTarget(0.3).restart();
      }
      d.fx = d.x;
      d.fy = d.y;
    }

    function dragged(d) {
      d.fx = d3.event.x;
      d.fy = d3.event.y;
    }

    function dragended(d) {
      if (!d3.event.active) {
        cellForceSimulation.alphaTarget(0.3).restart();
        simulation.alphaTarget(0);
      }
      d.fx = null;
      d.fy = null;
    }

    function buildGraph() {
      const node_data = set.nodes.map(d => d.titleTerm);
      const edge_data = set.links.map(d => [d.source, d.target, d.value]);
      G.addNodesFrom(node_data);
      G.addEdgesFrom(edge_data);
    }

    function communityDetecting() {
      const l = JSON.parse(JSON.stringify(set.links));
      // console.log(links);
      for (let i = 0; i < l.length; i += 1) {
        // console.log(links[i]);
        l[i].source = set.nodes.findIndex(ele => ele.titleTerm === set.links[i].source);
        l[i].target = set.nodes.findIndex(ele => ele.titleTerm === set.links[i].target);
      }
      // console.log(set.nodes, set.links, l);
      netClustering.cluster(set.nodes, l);
    }


    function getTermCommunity() {
      let communityArr = [];
      set.nodes.forEach((d) => {
        const index = communityArr.findIndex(a => a.cluster === d.cluster);
        if (index !== -1) {
          communityArr[index].id.push(d.titleTerm);
        } else {
          communityArr.push({ cluster: d.cluster, id: [d.titleTerm] });
        }
      });

      communityArr = communityArr.sort((a, b) => (a.cluster > b.cluster ? 1 : -1));
      return communityArr;
    }

    function zoomed() {
      svg.attr('transform', d3.event.transform);
    }

    function heatMapZoomed() {
      heatMapSvg.attr('transform', d3.event.transform);
    }
  }

  render() {
    console.log('render: ', this.state);
    const {
      cellData,
      beforeThisDate,
      cellForceSimulation,
      totalAuthorInfluence,
      word,
      optionsWord,
      opState,
    } = this.state;
    const $this = this;
    return (
      <div className="graph" ref={this.myRef}>
        {/* <div className="barchart">
          <svg id="barChart" width="100%" height="100%" style={{ border: '2px solid gray' }} />
        </div> */}
        <div className="network">
          <div
            className="filterBar"
            id="button"
            style={{ width: '100%', height: '25px', padding: '0px 10px' }}
          />
          <div className="termMap">
            <svg id="graph" width="100%" height="100%" style={{}} />
          </div>
          <div className="authorList" id="authorList" style={{ height: '100%', overflowY: 'auto' }} />
        </div>
        <OpinionLeaderView data={{
          word,
          cellData,
          beforeThisDate,
          cellForceSimulation,
          totalAuthorInfluence,
          $this,
          optionsWord,
          opState,
        }}
        />
        <div id="googleChart" />
        {/* <WordTree word={word} /> */}
        <div className="heatMap" style={{ border: '2px solid gray', height: 'fit-content', overflowX: 'scroll' }}>
          <svg id="timeLine" width="100%" height="600px" />
        </div>
        {/* </div> */}
      </div>
    );
  }
}

export default Graph;
